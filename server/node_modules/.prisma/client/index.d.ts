
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model RM
 * 
 */
export type RM = $Result.DefaultSelection<Prisma.$RMPayload>
/**
 * Model ProductPlan
 * 
 */
export type ProductPlan = $Result.DefaultSelection<Prisma.$ProductPlanPayload>
/**
 * Model ProductPlanRM
 * 
 */
export type ProductPlanRM = $Result.DefaultSelection<Prisma.$ProductPlanRMPayload>
/**
 * Model Formula
 * 
 */
export type Formula = $Result.DefaultSelection<Prisma.$FormulaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more RMS
 * const rMS = await prisma.rM.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more RMS
   * const rMS = await prisma.rM.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.rM`: Exposes CRUD operations for the **RM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RMS
    * const rMS = await prisma.rM.findMany()
    * ```
    */
  get rM(): Prisma.RMDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productPlan`: Exposes CRUD operations for the **ProductPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductPlans
    * const productPlans = await prisma.productPlan.findMany()
    * ```
    */
  get productPlan(): Prisma.ProductPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productPlanRM`: Exposes CRUD operations for the **ProductPlanRM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductPlanRMS
    * const productPlanRMS = await prisma.productPlanRM.findMany()
    * ```
    */
  get productPlanRM(): Prisma.ProductPlanRMDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.formula`: Exposes CRUD operations for the **Formula** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Formulas
    * const formulas = await prisma.formula.findMany()
    * ```
    */
  get formula(): Prisma.FormulaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    RM: 'RM',
    ProductPlan: 'ProductPlan',
    ProductPlanRM: 'ProductPlanRM',
    Formula: 'Formula'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "rM" | "productPlan" | "productPlanRM" | "formula"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      RM: {
        payload: Prisma.$RMPayload<ExtArgs>
        fields: Prisma.RMFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RMFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RMFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          findFirst: {
            args: Prisma.RMFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RMFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          findMany: {
            args: Prisma.RMFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>[]
          }
          create: {
            args: Prisma.RMCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          createMany: {
            args: Prisma.RMCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RMCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>[]
          }
          delete: {
            args: Prisma.RMDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          update: {
            args: Prisma.RMUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          deleteMany: {
            args: Prisma.RMDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RMUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RMUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>[]
          }
          upsert: {
            args: Prisma.RMUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RMPayload>
          }
          aggregate: {
            args: Prisma.RMAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRM>
          }
          groupBy: {
            args: Prisma.RMGroupByArgs<ExtArgs>
            result: $Utils.Optional<RMGroupByOutputType>[]
          }
          count: {
            args: Prisma.RMCountArgs<ExtArgs>
            result: $Utils.Optional<RMCountAggregateOutputType> | number
          }
        }
      }
      ProductPlan: {
        payload: Prisma.$ProductPlanPayload<ExtArgs>
        fields: Prisma.ProductPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          findFirst: {
            args: Prisma.ProductPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          findMany: {
            args: Prisma.ProductPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>[]
          }
          create: {
            args: Prisma.ProductPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          createMany: {
            args: Prisma.ProductPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>[]
          }
          delete: {
            args: Prisma.ProductPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          update: {
            args: Prisma.ProductPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          deleteMany: {
            args: Prisma.ProductPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>[]
          }
          upsert: {
            args: Prisma.ProductPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanPayload>
          }
          aggregate: {
            args: Prisma.ProductPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductPlan>
          }
          groupBy: {
            args: Prisma.ProductPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductPlanCountArgs<ExtArgs>
            result: $Utils.Optional<ProductPlanCountAggregateOutputType> | number
          }
        }
      }
      ProductPlanRM: {
        payload: Prisma.$ProductPlanRMPayload<ExtArgs>
        fields: Prisma.ProductPlanRMFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductPlanRMFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductPlanRMFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          findFirst: {
            args: Prisma.ProductPlanRMFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductPlanRMFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          findMany: {
            args: Prisma.ProductPlanRMFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>[]
          }
          create: {
            args: Prisma.ProductPlanRMCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          createMany: {
            args: Prisma.ProductPlanRMCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductPlanRMCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>[]
          }
          delete: {
            args: Prisma.ProductPlanRMDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          update: {
            args: Prisma.ProductPlanRMUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          deleteMany: {
            args: Prisma.ProductPlanRMDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductPlanRMUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductPlanRMUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>[]
          }
          upsert: {
            args: Prisma.ProductPlanRMUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPlanRMPayload>
          }
          aggregate: {
            args: Prisma.ProductPlanRMAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductPlanRM>
          }
          groupBy: {
            args: Prisma.ProductPlanRMGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductPlanRMGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductPlanRMCountArgs<ExtArgs>
            result: $Utils.Optional<ProductPlanRMCountAggregateOutputType> | number
          }
        }
      }
      Formula: {
        payload: Prisma.$FormulaPayload<ExtArgs>
        fields: Prisma.FormulaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormulaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormulaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          findFirst: {
            args: Prisma.FormulaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormulaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          findMany: {
            args: Prisma.FormulaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>[]
          }
          create: {
            args: Prisma.FormulaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          createMany: {
            args: Prisma.FormulaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormulaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>[]
          }
          delete: {
            args: Prisma.FormulaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          update: {
            args: Prisma.FormulaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          deleteMany: {
            args: Prisma.FormulaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormulaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FormulaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>[]
          }
          upsert: {
            args: Prisma.FormulaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulaPayload>
          }
          aggregate: {
            args: Prisma.FormulaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormula>
          }
          groupBy: {
            args: Prisma.FormulaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormulaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormulaCountArgs<ExtArgs>
            result: $Utils.Optional<FormulaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    rM?: RMOmit
    productPlan?: ProductPlanOmit
    productPlanRM?: ProductPlanRMOmit
    formula?: FormulaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RMCountOutputType
   */

  export type RMCountOutputType = {
    formulas: number
    productPlanRMs: number
  }

  export type RMCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formulas?: boolean | RMCountOutputTypeCountFormulasArgs
    productPlanRMs?: boolean | RMCountOutputTypeCountProductPlanRMsArgs
  }

  // Custom InputTypes
  /**
   * RMCountOutputType without action
   */
  export type RMCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RMCountOutputType
     */
    select?: RMCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RMCountOutputType without action
   */
  export type RMCountOutputTypeCountFormulasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormulaWhereInput
  }

  /**
   * RMCountOutputType without action
   */
  export type RMCountOutputTypeCountProductPlanRMsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPlanRMWhereInput
  }


  /**
   * Count Type ProductPlanCountOutputType
   */

  export type ProductPlanCountOutputType = {
    rms: number
  }

  export type ProductPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rms?: boolean | ProductPlanCountOutputTypeCountRmsArgs
  }

  // Custom InputTypes
  /**
   * ProductPlanCountOutputType without action
   */
  export type ProductPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanCountOutputType
     */
    select?: ProductPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductPlanCountOutputType without action
   */
  export type ProductPlanCountOutputTypeCountRmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPlanRMWhereInput
  }


  /**
   * Models
   */

  /**
   * Model RM
   */

  export type AggregateRM = {
    _count: RMCountAggregateOutputType | null
    _avg: RMAvgAggregateOutputType | null
    _sum: RMSumAggregateOutputType | null
    _min: RMMinAggregateOutputType | null
    _max: RMMaxAggregateOutputType | null
  }

  export type RMAvgAggregateOutputType = {
    g_total: number | null
    order: number | null
  }

  export type RMSumAggregateOutputType = {
    g_total: number | null
    order: number | null
  }

  export type RMMinAggregateOutputType = {
    code: string | null
    name: string | null
    g_total: number | null
    order: number | null
  }

  export type RMMaxAggregateOutputType = {
    code: string | null
    name: string | null
    g_total: number | null
    order: number | null
  }

  export type RMCountAggregateOutputType = {
    code: number
    name: number
    g_total: number
    order: number
    _all: number
  }


  export type RMAvgAggregateInputType = {
    g_total?: true
    order?: true
  }

  export type RMSumAggregateInputType = {
    g_total?: true
    order?: true
  }

  export type RMMinAggregateInputType = {
    code?: true
    name?: true
    g_total?: true
    order?: true
  }

  export type RMMaxAggregateInputType = {
    code?: true
    name?: true
    g_total?: true
    order?: true
  }

  export type RMCountAggregateInputType = {
    code?: true
    name?: true
    g_total?: true
    order?: true
    _all?: true
  }

  export type RMAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RM to aggregate.
     */
    where?: RMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RMS to fetch.
     */
    orderBy?: RMOrderByWithRelationInput | RMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RMS
    **/
    _count?: true | RMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RMMaxAggregateInputType
  }

  export type GetRMAggregateType<T extends RMAggregateArgs> = {
        [P in keyof T & keyof AggregateRM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRM[P]>
      : GetScalarType<T[P], AggregateRM[P]>
  }




  export type RMGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RMWhereInput
    orderBy?: RMOrderByWithAggregationInput | RMOrderByWithAggregationInput[]
    by: RMScalarFieldEnum[] | RMScalarFieldEnum
    having?: RMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RMCountAggregateInputType | true
    _avg?: RMAvgAggregateInputType
    _sum?: RMSumAggregateInputType
    _min?: RMMinAggregateInputType
    _max?: RMMaxAggregateInputType
  }

  export type RMGroupByOutputType = {
    code: string
    name: string | null
    g_total: number | null
    order: number | null
    _count: RMCountAggregateOutputType | null
    _avg: RMAvgAggregateOutputType | null
    _sum: RMSumAggregateOutputType | null
    _min: RMMinAggregateOutputType | null
    _max: RMMaxAggregateOutputType | null
  }

  type GetRMGroupByPayload<T extends RMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RMGroupByOutputType[P]>
            : GetScalarType<T[P], RMGroupByOutputType[P]>
        }
      >
    >


  export type RMSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    g_total?: boolean
    order?: boolean
    formulas?: boolean | RM$formulasArgs<ExtArgs>
    productPlanRMs?: boolean | RM$productPlanRMsArgs<ExtArgs>
    _count?: boolean | RMCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rM"]>

  export type RMSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    g_total?: boolean
    order?: boolean
  }, ExtArgs["result"]["rM"]>

  export type RMSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    g_total?: boolean
    order?: boolean
  }, ExtArgs["result"]["rM"]>

  export type RMSelectScalar = {
    code?: boolean
    name?: boolean
    g_total?: boolean
    order?: boolean
  }

  export type RMOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "g_total" | "order", ExtArgs["result"]["rM"]>
  export type RMInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formulas?: boolean | RM$formulasArgs<ExtArgs>
    productPlanRMs?: boolean | RM$productPlanRMsArgs<ExtArgs>
    _count?: boolean | RMCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RMIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RMIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RMPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RM"
    objects: {
      formulas: Prisma.$FormulaPayload<ExtArgs>[]
      productPlanRMs: Prisma.$ProductPlanRMPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string | null
      g_total: number | null
      order: number | null
    }, ExtArgs["result"]["rM"]>
    composites: {}
  }

  type RMGetPayload<S extends boolean | null | undefined | RMDefaultArgs> = $Result.GetResult<Prisma.$RMPayload, S>

  type RMCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RMFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RMCountAggregateInputType | true
    }

  export interface RMDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RM'], meta: { name: 'RM' } }
    /**
     * Find zero or one RM that matches the filter.
     * @param {RMFindUniqueArgs} args - Arguments to find a RM
     * @example
     * // Get one RM
     * const rM = await prisma.rM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RMFindUniqueArgs>(args: SelectSubset<T, RMFindUniqueArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RM that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RMFindUniqueOrThrowArgs} args - Arguments to find a RM
     * @example
     * // Get one RM
     * const rM = await prisma.rM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RMFindUniqueOrThrowArgs>(args: SelectSubset<T, RMFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMFindFirstArgs} args - Arguments to find a RM
     * @example
     * // Get one RM
     * const rM = await prisma.rM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RMFindFirstArgs>(args?: SelectSubset<T, RMFindFirstArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RM that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMFindFirstOrThrowArgs} args - Arguments to find a RM
     * @example
     * // Get one RM
     * const rM = await prisma.rM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RMFindFirstOrThrowArgs>(args?: SelectSubset<T, RMFindFirstOrThrowArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RMS
     * const rMS = await prisma.rM.findMany()
     * 
     * // Get first 10 RMS
     * const rMS = await prisma.rM.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const rMWithCodeOnly = await prisma.rM.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends RMFindManyArgs>(args?: SelectSubset<T, RMFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RM.
     * @param {RMCreateArgs} args - Arguments to create a RM.
     * @example
     * // Create one RM
     * const RM = await prisma.rM.create({
     *   data: {
     *     // ... data to create a RM
     *   }
     * })
     * 
     */
    create<T extends RMCreateArgs>(args: SelectSubset<T, RMCreateArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RMS.
     * @param {RMCreateManyArgs} args - Arguments to create many RMS.
     * @example
     * // Create many RMS
     * const rM = await prisma.rM.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RMCreateManyArgs>(args?: SelectSubset<T, RMCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RMS and returns the data saved in the database.
     * @param {RMCreateManyAndReturnArgs} args - Arguments to create many RMS.
     * @example
     * // Create many RMS
     * const rM = await prisma.rM.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RMS and only return the `code`
     * const rMWithCodeOnly = await prisma.rM.createManyAndReturn({
     *   select: { code: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RMCreateManyAndReturnArgs>(args?: SelectSubset<T, RMCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RM.
     * @param {RMDeleteArgs} args - Arguments to delete one RM.
     * @example
     * // Delete one RM
     * const RM = await prisma.rM.delete({
     *   where: {
     *     // ... filter to delete one RM
     *   }
     * })
     * 
     */
    delete<T extends RMDeleteArgs>(args: SelectSubset<T, RMDeleteArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RM.
     * @param {RMUpdateArgs} args - Arguments to update one RM.
     * @example
     * // Update one RM
     * const rM = await prisma.rM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RMUpdateArgs>(args: SelectSubset<T, RMUpdateArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RMS.
     * @param {RMDeleteManyArgs} args - Arguments to filter RMS to delete.
     * @example
     * // Delete a few RMS
     * const { count } = await prisma.rM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RMDeleteManyArgs>(args?: SelectSubset<T, RMDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RMS
     * const rM = await prisma.rM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RMUpdateManyArgs>(args: SelectSubset<T, RMUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RMS and returns the data updated in the database.
     * @param {RMUpdateManyAndReturnArgs} args - Arguments to update many RMS.
     * @example
     * // Update many RMS
     * const rM = await prisma.rM.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RMS and only return the `code`
     * const rMWithCodeOnly = await prisma.rM.updateManyAndReturn({
     *   select: { code: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RMUpdateManyAndReturnArgs>(args: SelectSubset<T, RMUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RM.
     * @param {RMUpsertArgs} args - Arguments to update or create a RM.
     * @example
     * // Update or create a RM
     * const rM = await prisma.rM.upsert({
     *   create: {
     *     // ... data to create a RM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RM we want to update
     *   }
     * })
     */
    upsert<T extends RMUpsertArgs>(args: SelectSubset<T, RMUpsertArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMCountArgs} args - Arguments to filter RMS to count.
     * @example
     * // Count the number of RMS
     * const count = await prisma.rM.count({
     *   where: {
     *     // ... the filter for the RMS we want to count
     *   }
     * })
    **/
    count<T extends RMCountArgs>(
      args?: Subset<T, RMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RMAggregateArgs>(args: Subset<T, RMAggregateArgs>): Prisma.PrismaPromise<GetRMAggregateType<T>>

    /**
     * Group by RM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RMGroupByArgs['orderBy'] }
        : { orderBy?: RMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RM model
   */
  readonly fields: RMFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RMClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    formulas<T extends RM$formulasArgs<ExtArgs> = {}>(args?: Subset<T, RM$formulasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productPlanRMs<T extends RM$productPlanRMsArgs<ExtArgs> = {}>(args?: Subset<T, RM$productPlanRMsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RM model
   */
  interface RMFieldRefs {
    readonly code: FieldRef<"RM", 'String'>
    readonly name: FieldRef<"RM", 'String'>
    readonly g_total: FieldRef<"RM", 'Float'>
    readonly order: FieldRef<"RM", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RM findUnique
   */
  export type RMFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter, which RM to fetch.
     */
    where: RMWhereUniqueInput
  }

  /**
   * RM findUniqueOrThrow
   */
  export type RMFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter, which RM to fetch.
     */
    where: RMWhereUniqueInput
  }

  /**
   * RM findFirst
   */
  export type RMFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter, which RM to fetch.
     */
    where?: RMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RMS to fetch.
     */
    orderBy?: RMOrderByWithRelationInput | RMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RMS.
     */
    cursor?: RMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RMS.
     */
    distinct?: RMScalarFieldEnum | RMScalarFieldEnum[]
  }

  /**
   * RM findFirstOrThrow
   */
  export type RMFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter, which RM to fetch.
     */
    where?: RMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RMS to fetch.
     */
    orderBy?: RMOrderByWithRelationInput | RMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RMS.
     */
    cursor?: RMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RMS.
     */
    distinct?: RMScalarFieldEnum | RMScalarFieldEnum[]
  }

  /**
   * RM findMany
   */
  export type RMFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter, which RMS to fetch.
     */
    where?: RMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RMS to fetch.
     */
    orderBy?: RMOrderByWithRelationInput | RMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RMS.
     */
    cursor?: RMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RMS.
     */
    skip?: number
    distinct?: RMScalarFieldEnum | RMScalarFieldEnum[]
  }

  /**
   * RM create
   */
  export type RMCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * The data needed to create a RM.
     */
    data: XOR<RMCreateInput, RMUncheckedCreateInput>
  }

  /**
   * RM createMany
   */
  export type RMCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RMS.
     */
    data: RMCreateManyInput | RMCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RM createManyAndReturn
   */
  export type RMCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * The data used to create many RMS.
     */
    data: RMCreateManyInput | RMCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RM update
   */
  export type RMUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * The data needed to update a RM.
     */
    data: XOR<RMUpdateInput, RMUncheckedUpdateInput>
    /**
     * Choose, which RM to update.
     */
    where: RMWhereUniqueInput
  }

  /**
   * RM updateMany
   */
  export type RMUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RMS.
     */
    data: XOR<RMUpdateManyMutationInput, RMUncheckedUpdateManyInput>
    /**
     * Filter which RMS to update
     */
    where?: RMWhereInput
    /**
     * Limit how many RMS to update.
     */
    limit?: number
  }

  /**
   * RM updateManyAndReturn
   */
  export type RMUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * The data used to update RMS.
     */
    data: XOR<RMUpdateManyMutationInput, RMUncheckedUpdateManyInput>
    /**
     * Filter which RMS to update
     */
    where?: RMWhereInput
    /**
     * Limit how many RMS to update.
     */
    limit?: number
  }

  /**
   * RM upsert
   */
  export type RMUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * The filter to search for the RM to update in case it exists.
     */
    where: RMWhereUniqueInput
    /**
     * In case the RM found by the `where` argument doesn't exist, create a new RM with this data.
     */
    create: XOR<RMCreateInput, RMUncheckedCreateInput>
    /**
     * In case the RM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RMUpdateInput, RMUncheckedUpdateInput>
  }

  /**
   * RM delete
   */
  export type RMDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    /**
     * Filter which RM to delete.
     */
    where: RMWhereUniqueInput
  }

  /**
   * RM deleteMany
   */
  export type RMDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RMS to delete
     */
    where?: RMWhereInput
    /**
     * Limit how many RMS to delete.
     */
    limit?: number
  }

  /**
   * RM.formulas
   */
  export type RM$formulasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    where?: FormulaWhereInput
    orderBy?: FormulaOrderByWithRelationInput | FormulaOrderByWithRelationInput[]
    cursor?: FormulaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormulaScalarFieldEnum | FormulaScalarFieldEnum[]
  }

  /**
   * RM.productPlanRMs
   */
  export type RM$productPlanRMsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    where?: ProductPlanRMWhereInput
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    cursor?: ProductPlanRMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductPlanRMScalarFieldEnum | ProductPlanRMScalarFieldEnum[]
  }

  /**
   * RM without action
   */
  export type RMDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
  }


  /**
   * Model ProductPlan
   */

  export type AggregateProductPlan = {
    _count: ProductPlanCountAggregateOutputType | null
    _avg: ProductPlanAvgAggregateOutputType | null
    _sum: ProductPlanSumAggregateOutputType | null
    _min: ProductPlanMinAggregateOutputType | null
    _max: ProductPlanMaxAggregateOutputType | null
  }

  export type ProductPlanAvgAggregateOutputType = {
    id: number | null
    percent: number | null
  }

  export type ProductPlanSumAggregateOutputType = {
    id: number | null
    percent: number | null
  }

  export type ProductPlanMinAggregateOutputType = {
    id: number | null
    colorCode: string | null
    lot: string | null
    percent: number | null
    date: Date | null
    department: string | null
  }

  export type ProductPlanMaxAggregateOutputType = {
    id: number | null
    colorCode: string | null
    lot: string | null
    percent: number | null
    date: Date | null
    department: string | null
  }

  export type ProductPlanCountAggregateOutputType = {
    id: number
    colorCode: number
    lot: number
    percent: number
    date: number
    department: number
    _all: number
  }


  export type ProductPlanAvgAggregateInputType = {
    id?: true
    percent?: true
  }

  export type ProductPlanSumAggregateInputType = {
    id?: true
    percent?: true
  }

  export type ProductPlanMinAggregateInputType = {
    id?: true
    colorCode?: true
    lot?: true
    percent?: true
    date?: true
    department?: true
  }

  export type ProductPlanMaxAggregateInputType = {
    id?: true
    colorCode?: true
    lot?: true
    percent?: true
    date?: true
    department?: true
  }

  export type ProductPlanCountAggregateInputType = {
    id?: true
    colorCode?: true
    lot?: true
    percent?: true
    date?: true
    department?: true
    _all?: true
  }

  export type ProductPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPlan to aggregate.
     */
    where?: ProductPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlans to fetch.
     */
    orderBy?: ProductPlanOrderByWithRelationInput | ProductPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductPlans
    **/
    _count?: true | ProductPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductPlanMaxAggregateInputType
  }

  export type GetProductPlanAggregateType<T extends ProductPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateProductPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductPlan[P]>
      : GetScalarType<T[P], AggregateProductPlan[P]>
  }




  export type ProductPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPlanWhereInput
    orderBy?: ProductPlanOrderByWithAggregationInput | ProductPlanOrderByWithAggregationInput[]
    by: ProductPlanScalarFieldEnum[] | ProductPlanScalarFieldEnum
    having?: ProductPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductPlanCountAggregateInputType | true
    _avg?: ProductPlanAvgAggregateInputType
    _sum?: ProductPlanSumAggregateInputType
    _min?: ProductPlanMinAggregateInputType
    _max?: ProductPlanMaxAggregateInputType
  }

  export type ProductPlanGroupByOutputType = {
    id: number
    colorCode: string
    lot: string
    percent: number
    date: Date
    department: string
    _count: ProductPlanCountAggregateOutputType | null
    _avg: ProductPlanAvgAggregateOutputType | null
    _sum: ProductPlanSumAggregateOutputType | null
    _min: ProductPlanMinAggregateOutputType | null
    _max: ProductPlanMaxAggregateOutputType | null
  }

  type GetProductPlanGroupByPayload<T extends ProductPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductPlanGroupByOutputType[P]>
            : GetScalarType<T[P], ProductPlanGroupByOutputType[P]>
        }
      >
    >


  export type ProductPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    lot?: boolean
    percent?: boolean
    date?: boolean
    department?: boolean
    rms?: boolean | ProductPlan$rmsArgs<ExtArgs>
    _count?: boolean | ProductPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPlan"]>

  export type ProductPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    lot?: boolean
    percent?: boolean
    date?: boolean
    department?: boolean
  }, ExtArgs["result"]["productPlan"]>

  export type ProductPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    lot?: boolean
    percent?: boolean
    date?: boolean
    department?: boolean
  }, ExtArgs["result"]["productPlan"]>

  export type ProductPlanSelectScalar = {
    id?: boolean
    colorCode?: boolean
    lot?: boolean
    percent?: boolean
    date?: boolean
    department?: boolean
  }

  export type ProductPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "colorCode" | "lot" | "percent" | "date" | "department", ExtArgs["result"]["productPlan"]>
  export type ProductPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rms?: boolean | ProductPlan$rmsArgs<ExtArgs>
    _count?: boolean | ProductPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductPlan"
    objects: {
      rms: Prisma.$ProductPlanRMPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      colorCode: string
      lot: string
      percent: number
      date: Date
      department: string
    }, ExtArgs["result"]["productPlan"]>
    composites: {}
  }

  type ProductPlanGetPayload<S extends boolean | null | undefined | ProductPlanDefaultArgs> = $Result.GetResult<Prisma.$ProductPlanPayload, S>

  type ProductPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductPlanCountAggregateInputType | true
    }

  export interface ProductPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductPlan'], meta: { name: 'ProductPlan' } }
    /**
     * Find zero or one ProductPlan that matches the filter.
     * @param {ProductPlanFindUniqueArgs} args - Arguments to find a ProductPlan
     * @example
     * // Get one ProductPlan
     * const productPlan = await prisma.productPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductPlanFindUniqueArgs>(args: SelectSubset<T, ProductPlanFindUniqueArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductPlanFindUniqueOrThrowArgs} args - Arguments to find a ProductPlan
     * @example
     * // Get one ProductPlan
     * const productPlan = await prisma.productPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanFindFirstArgs} args - Arguments to find a ProductPlan
     * @example
     * // Get one ProductPlan
     * const productPlan = await prisma.productPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductPlanFindFirstArgs>(args?: SelectSubset<T, ProductPlanFindFirstArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanFindFirstOrThrowArgs} args - Arguments to find a ProductPlan
     * @example
     * // Get one ProductPlan
     * const productPlan = await prisma.productPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductPlans
     * const productPlans = await prisma.productPlan.findMany()
     * 
     * // Get first 10 ProductPlans
     * const productPlans = await prisma.productPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productPlanWithIdOnly = await prisma.productPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductPlanFindManyArgs>(args?: SelectSubset<T, ProductPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductPlan.
     * @param {ProductPlanCreateArgs} args - Arguments to create a ProductPlan.
     * @example
     * // Create one ProductPlan
     * const ProductPlan = await prisma.productPlan.create({
     *   data: {
     *     // ... data to create a ProductPlan
     *   }
     * })
     * 
     */
    create<T extends ProductPlanCreateArgs>(args: SelectSubset<T, ProductPlanCreateArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductPlans.
     * @param {ProductPlanCreateManyArgs} args - Arguments to create many ProductPlans.
     * @example
     * // Create many ProductPlans
     * const productPlan = await prisma.productPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductPlanCreateManyArgs>(args?: SelectSubset<T, ProductPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductPlans and returns the data saved in the database.
     * @param {ProductPlanCreateManyAndReturnArgs} args - Arguments to create many ProductPlans.
     * @example
     * // Create many ProductPlans
     * const productPlan = await prisma.productPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductPlans and only return the `id`
     * const productPlanWithIdOnly = await prisma.productPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductPlan.
     * @param {ProductPlanDeleteArgs} args - Arguments to delete one ProductPlan.
     * @example
     * // Delete one ProductPlan
     * const ProductPlan = await prisma.productPlan.delete({
     *   where: {
     *     // ... filter to delete one ProductPlan
     *   }
     * })
     * 
     */
    delete<T extends ProductPlanDeleteArgs>(args: SelectSubset<T, ProductPlanDeleteArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductPlan.
     * @param {ProductPlanUpdateArgs} args - Arguments to update one ProductPlan.
     * @example
     * // Update one ProductPlan
     * const productPlan = await prisma.productPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductPlanUpdateArgs>(args: SelectSubset<T, ProductPlanUpdateArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductPlans.
     * @param {ProductPlanDeleteManyArgs} args - Arguments to filter ProductPlans to delete.
     * @example
     * // Delete a few ProductPlans
     * const { count } = await prisma.productPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductPlanDeleteManyArgs>(args?: SelectSubset<T, ProductPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductPlans
     * const productPlan = await prisma.productPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductPlanUpdateManyArgs>(args: SelectSubset<T, ProductPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPlans and returns the data updated in the database.
     * @param {ProductPlanUpdateManyAndReturnArgs} args - Arguments to update many ProductPlans.
     * @example
     * // Update many ProductPlans
     * const productPlan = await prisma.productPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductPlans and only return the `id`
     * const productPlanWithIdOnly = await prisma.productPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductPlan.
     * @param {ProductPlanUpsertArgs} args - Arguments to update or create a ProductPlan.
     * @example
     * // Update or create a ProductPlan
     * const productPlan = await prisma.productPlan.upsert({
     *   create: {
     *     // ... data to create a ProductPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductPlan we want to update
     *   }
     * })
     */
    upsert<T extends ProductPlanUpsertArgs>(args: SelectSubset<T, ProductPlanUpsertArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanCountArgs} args - Arguments to filter ProductPlans to count.
     * @example
     * // Count the number of ProductPlans
     * const count = await prisma.productPlan.count({
     *   where: {
     *     // ... the filter for the ProductPlans we want to count
     *   }
     * })
    **/
    count<T extends ProductPlanCountArgs>(
      args?: Subset<T, ProductPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductPlanAggregateArgs>(args: Subset<T, ProductPlanAggregateArgs>): Prisma.PrismaPromise<GetProductPlanAggregateType<T>>

    /**
     * Group by ProductPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductPlanGroupByArgs['orderBy'] }
        : { orderBy?: ProductPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductPlan model
   */
  readonly fields: ProductPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rms<T extends ProductPlan$rmsArgs<ExtArgs> = {}>(args?: Subset<T, ProductPlan$rmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductPlan model
   */
  interface ProductPlanFieldRefs {
    readonly id: FieldRef<"ProductPlan", 'Int'>
    readonly colorCode: FieldRef<"ProductPlan", 'String'>
    readonly lot: FieldRef<"ProductPlan", 'String'>
    readonly percent: FieldRef<"ProductPlan", 'Float'>
    readonly date: FieldRef<"ProductPlan", 'DateTime'>
    readonly department: FieldRef<"ProductPlan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductPlan findUnique
   */
  export type ProductPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlan to fetch.
     */
    where: ProductPlanWhereUniqueInput
  }

  /**
   * ProductPlan findUniqueOrThrow
   */
  export type ProductPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlan to fetch.
     */
    where: ProductPlanWhereUniqueInput
  }

  /**
   * ProductPlan findFirst
   */
  export type ProductPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlan to fetch.
     */
    where?: ProductPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlans to fetch.
     */
    orderBy?: ProductPlanOrderByWithRelationInput | ProductPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPlans.
     */
    cursor?: ProductPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPlans.
     */
    distinct?: ProductPlanScalarFieldEnum | ProductPlanScalarFieldEnum[]
  }

  /**
   * ProductPlan findFirstOrThrow
   */
  export type ProductPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlan to fetch.
     */
    where?: ProductPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlans to fetch.
     */
    orderBy?: ProductPlanOrderByWithRelationInput | ProductPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPlans.
     */
    cursor?: ProductPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPlans.
     */
    distinct?: ProductPlanScalarFieldEnum | ProductPlanScalarFieldEnum[]
  }

  /**
   * ProductPlan findMany
   */
  export type ProductPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlans to fetch.
     */
    where?: ProductPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlans to fetch.
     */
    orderBy?: ProductPlanOrderByWithRelationInput | ProductPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductPlans.
     */
    cursor?: ProductPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlans.
     */
    skip?: number
    distinct?: ProductPlanScalarFieldEnum | ProductPlanScalarFieldEnum[]
  }

  /**
   * ProductPlan create
   */
  export type ProductPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductPlan.
     */
    data: XOR<ProductPlanCreateInput, ProductPlanUncheckedCreateInput>
  }

  /**
   * ProductPlan createMany
   */
  export type ProductPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductPlans.
     */
    data: ProductPlanCreateManyInput | ProductPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductPlan createManyAndReturn
   */
  export type ProductPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * The data used to create many ProductPlans.
     */
    data: ProductPlanCreateManyInput | ProductPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductPlan update
   */
  export type ProductPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductPlan.
     */
    data: XOR<ProductPlanUpdateInput, ProductPlanUncheckedUpdateInput>
    /**
     * Choose, which ProductPlan to update.
     */
    where: ProductPlanWhereUniqueInput
  }

  /**
   * ProductPlan updateMany
   */
  export type ProductPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductPlans.
     */
    data: XOR<ProductPlanUpdateManyMutationInput, ProductPlanUncheckedUpdateManyInput>
    /**
     * Filter which ProductPlans to update
     */
    where?: ProductPlanWhereInput
    /**
     * Limit how many ProductPlans to update.
     */
    limit?: number
  }

  /**
   * ProductPlan updateManyAndReturn
   */
  export type ProductPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * The data used to update ProductPlans.
     */
    data: XOR<ProductPlanUpdateManyMutationInput, ProductPlanUncheckedUpdateManyInput>
    /**
     * Filter which ProductPlans to update
     */
    where?: ProductPlanWhereInput
    /**
     * Limit how many ProductPlans to update.
     */
    limit?: number
  }

  /**
   * ProductPlan upsert
   */
  export type ProductPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductPlan to update in case it exists.
     */
    where: ProductPlanWhereUniqueInput
    /**
     * In case the ProductPlan found by the `where` argument doesn't exist, create a new ProductPlan with this data.
     */
    create: XOR<ProductPlanCreateInput, ProductPlanUncheckedCreateInput>
    /**
     * In case the ProductPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductPlanUpdateInput, ProductPlanUncheckedUpdateInput>
  }

  /**
   * ProductPlan delete
   */
  export type ProductPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
    /**
     * Filter which ProductPlan to delete.
     */
    where: ProductPlanWhereUniqueInput
  }

  /**
   * ProductPlan deleteMany
   */
  export type ProductPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPlans to delete
     */
    where?: ProductPlanWhereInput
    /**
     * Limit how many ProductPlans to delete.
     */
    limit?: number
  }

  /**
   * ProductPlan.rms
   */
  export type ProductPlan$rmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    where?: ProductPlanRMWhereInput
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    cursor?: ProductPlanRMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductPlanRMScalarFieldEnum | ProductPlanRMScalarFieldEnum[]
  }

  /**
   * ProductPlan without action
   */
  export type ProductPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlan
     */
    select?: ProductPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlan
     */
    omit?: ProductPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanInclude<ExtArgs> | null
  }


  /**
   * Model ProductPlanRM
   */

  export type AggregateProductPlanRM = {
    _count: ProductPlanRMCountAggregateOutputType | null
    _avg: ProductPlanRMAvgAggregateOutputType | null
    _sum: ProductPlanRMSumAggregateOutputType | null
    _min: ProductPlanRMMinAggregateOutputType | null
    _max: ProductPlanRMMaxAggregateOutputType | null
  }

  export type ProductPlanRMAvgAggregateOutputType = {
    id: number | null
    productPlanId: number | null
    qtyUsed: number | null
  }

  export type ProductPlanRMSumAggregateOutputType = {
    id: number | null
    productPlanId: number | null
    qtyUsed: number | null
  }

  export type ProductPlanRMMinAggregateOutputType = {
    id: number | null
    productPlanId: number | null
    rmCode: string | null
    qtyUsed: number | null
  }

  export type ProductPlanRMMaxAggregateOutputType = {
    id: number | null
    productPlanId: number | null
    rmCode: string | null
    qtyUsed: number | null
  }

  export type ProductPlanRMCountAggregateOutputType = {
    id: number
    productPlanId: number
    rmCode: number
    qtyUsed: number
    _all: number
  }


  export type ProductPlanRMAvgAggregateInputType = {
    id?: true
    productPlanId?: true
    qtyUsed?: true
  }

  export type ProductPlanRMSumAggregateInputType = {
    id?: true
    productPlanId?: true
    qtyUsed?: true
  }

  export type ProductPlanRMMinAggregateInputType = {
    id?: true
    productPlanId?: true
    rmCode?: true
    qtyUsed?: true
  }

  export type ProductPlanRMMaxAggregateInputType = {
    id?: true
    productPlanId?: true
    rmCode?: true
    qtyUsed?: true
  }

  export type ProductPlanRMCountAggregateInputType = {
    id?: true
    productPlanId?: true
    rmCode?: true
    qtyUsed?: true
    _all?: true
  }

  export type ProductPlanRMAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPlanRM to aggregate.
     */
    where?: ProductPlanRMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlanRMS to fetch.
     */
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductPlanRMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlanRMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlanRMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductPlanRMS
    **/
    _count?: true | ProductPlanRMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductPlanRMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductPlanRMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductPlanRMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductPlanRMMaxAggregateInputType
  }

  export type GetProductPlanRMAggregateType<T extends ProductPlanRMAggregateArgs> = {
        [P in keyof T & keyof AggregateProductPlanRM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductPlanRM[P]>
      : GetScalarType<T[P], AggregateProductPlanRM[P]>
  }




  export type ProductPlanRMGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPlanRMWhereInput
    orderBy?: ProductPlanRMOrderByWithAggregationInput | ProductPlanRMOrderByWithAggregationInput[]
    by: ProductPlanRMScalarFieldEnum[] | ProductPlanRMScalarFieldEnum
    having?: ProductPlanRMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductPlanRMCountAggregateInputType | true
    _avg?: ProductPlanRMAvgAggregateInputType
    _sum?: ProductPlanRMSumAggregateInputType
    _min?: ProductPlanRMMinAggregateInputType
    _max?: ProductPlanRMMaxAggregateInputType
  }

  export type ProductPlanRMGroupByOutputType = {
    id: number
    productPlanId: number
    rmCode: string
    qtyUsed: number
    _count: ProductPlanRMCountAggregateOutputType | null
    _avg: ProductPlanRMAvgAggregateOutputType | null
    _sum: ProductPlanRMSumAggregateOutputType | null
    _min: ProductPlanRMMinAggregateOutputType | null
    _max: ProductPlanRMMaxAggregateOutputType | null
  }

  type GetProductPlanRMGroupByPayload<T extends ProductPlanRMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductPlanRMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductPlanRMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductPlanRMGroupByOutputType[P]>
            : GetScalarType<T[P], ProductPlanRMGroupByOutputType[P]>
        }
      >
    >


  export type ProductPlanRMSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productPlanId?: boolean
    rmCode?: boolean
    qtyUsed?: boolean
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPlanRM"]>

  export type ProductPlanRMSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productPlanId?: boolean
    rmCode?: boolean
    qtyUsed?: boolean
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPlanRM"]>

  export type ProductPlanRMSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productPlanId?: boolean
    rmCode?: boolean
    qtyUsed?: boolean
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPlanRM"]>

  export type ProductPlanRMSelectScalar = {
    id?: boolean
    productPlanId?: boolean
    rmCode?: boolean
    qtyUsed?: boolean
  }

  export type ProductPlanRMOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productPlanId" | "rmCode" | "qtyUsed", ExtArgs["result"]["productPlanRM"]>
  export type ProductPlanRMInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }
  export type ProductPlanRMIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }
  export type ProductPlanRMIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productPlan?: boolean | ProductPlanDefaultArgs<ExtArgs>
    rm?: boolean | RMDefaultArgs<ExtArgs>
  }

  export type $ProductPlanRMPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductPlanRM"
    objects: {
      productPlan: Prisma.$ProductPlanPayload<ExtArgs>
      rm: Prisma.$RMPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productPlanId: number
      rmCode: string
      qtyUsed: number
    }, ExtArgs["result"]["productPlanRM"]>
    composites: {}
  }

  type ProductPlanRMGetPayload<S extends boolean | null | undefined | ProductPlanRMDefaultArgs> = $Result.GetResult<Prisma.$ProductPlanRMPayload, S>

  type ProductPlanRMCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductPlanRMFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductPlanRMCountAggregateInputType | true
    }

  export interface ProductPlanRMDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductPlanRM'], meta: { name: 'ProductPlanRM' } }
    /**
     * Find zero or one ProductPlanRM that matches the filter.
     * @param {ProductPlanRMFindUniqueArgs} args - Arguments to find a ProductPlanRM
     * @example
     * // Get one ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductPlanRMFindUniqueArgs>(args: SelectSubset<T, ProductPlanRMFindUniqueArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductPlanRM that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductPlanRMFindUniqueOrThrowArgs} args - Arguments to find a ProductPlanRM
     * @example
     * // Get one ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductPlanRMFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductPlanRMFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPlanRM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMFindFirstArgs} args - Arguments to find a ProductPlanRM
     * @example
     * // Get one ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductPlanRMFindFirstArgs>(args?: SelectSubset<T, ProductPlanRMFindFirstArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPlanRM that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMFindFirstOrThrowArgs} args - Arguments to find a ProductPlanRM
     * @example
     * // Get one ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductPlanRMFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductPlanRMFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductPlanRMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductPlanRMS
     * const productPlanRMS = await prisma.productPlanRM.findMany()
     * 
     * // Get first 10 ProductPlanRMS
     * const productPlanRMS = await prisma.productPlanRM.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productPlanRMWithIdOnly = await prisma.productPlanRM.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductPlanRMFindManyArgs>(args?: SelectSubset<T, ProductPlanRMFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductPlanRM.
     * @param {ProductPlanRMCreateArgs} args - Arguments to create a ProductPlanRM.
     * @example
     * // Create one ProductPlanRM
     * const ProductPlanRM = await prisma.productPlanRM.create({
     *   data: {
     *     // ... data to create a ProductPlanRM
     *   }
     * })
     * 
     */
    create<T extends ProductPlanRMCreateArgs>(args: SelectSubset<T, ProductPlanRMCreateArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductPlanRMS.
     * @param {ProductPlanRMCreateManyArgs} args - Arguments to create many ProductPlanRMS.
     * @example
     * // Create many ProductPlanRMS
     * const productPlanRM = await prisma.productPlanRM.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductPlanRMCreateManyArgs>(args?: SelectSubset<T, ProductPlanRMCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductPlanRMS and returns the data saved in the database.
     * @param {ProductPlanRMCreateManyAndReturnArgs} args - Arguments to create many ProductPlanRMS.
     * @example
     * // Create many ProductPlanRMS
     * const productPlanRM = await prisma.productPlanRM.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductPlanRMS and only return the `id`
     * const productPlanRMWithIdOnly = await prisma.productPlanRM.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductPlanRMCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductPlanRMCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductPlanRM.
     * @param {ProductPlanRMDeleteArgs} args - Arguments to delete one ProductPlanRM.
     * @example
     * // Delete one ProductPlanRM
     * const ProductPlanRM = await prisma.productPlanRM.delete({
     *   where: {
     *     // ... filter to delete one ProductPlanRM
     *   }
     * })
     * 
     */
    delete<T extends ProductPlanRMDeleteArgs>(args: SelectSubset<T, ProductPlanRMDeleteArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductPlanRM.
     * @param {ProductPlanRMUpdateArgs} args - Arguments to update one ProductPlanRM.
     * @example
     * // Update one ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductPlanRMUpdateArgs>(args: SelectSubset<T, ProductPlanRMUpdateArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductPlanRMS.
     * @param {ProductPlanRMDeleteManyArgs} args - Arguments to filter ProductPlanRMS to delete.
     * @example
     * // Delete a few ProductPlanRMS
     * const { count } = await prisma.productPlanRM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductPlanRMDeleteManyArgs>(args?: SelectSubset<T, ProductPlanRMDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPlanRMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductPlanRMS
     * const productPlanRM = await prisma.productPlanRM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductPlanRMUpdateManyArgs>(args: SelectSubset<T, ProductPlanRMUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPlanRMS and returns the data updated in the database.
     * @param {ProductPlanRMUpdateManyAndReturnArgs} args - Arguments to update many ProductPlanRMS.
     * @example
     * // Update many ProductPlanRMS
     * const productPlanRM = await prisma.productPlanRM.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductPlanRMS and only return the `id`
     * const productPlanRMWithIdOnly = await prisma.productPlanRM.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductPlanRMUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductPlanRMUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductPlanRM.
     * @param {ProductPlanRMUpsertArgs} args - Arguments to update or create a ProductPlanRM.
     * @example
     * // Update or create a ProductPlanRM
     * const productPlanRM = await prisma.productPlanRM.upsert({
     *   create: {
     *     // ... data to create a ProductPlanRM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductPlanRM we want to update
     *   }
     * })
     */
    upsert<T extends ProductPlanRMUpsertArgs>(args: SelectSubset<T, ProductPlanRMUpsertArgs<ExtArgs>>): Prisma__ProductPlanRMClient<$Result.GetResult<Prisma.$ProductPlanRMPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductPlanRMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMCountArgs} args - Arguments to filter ProductPlanRMS to count.
     * @example
     * // Count the number of ProductPlanRMS
     * const count = await prisma.productPlanRM.count({
     *   where: {
     *     // ... the filter for the ProductPlanRMS we want to count
     *   }
     * })
    **/
    count<T extends ProductPlanRMCountArgs>(
      args?: Subset<T, ProductPlanRMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductPlanRMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductPlanRM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductPlanRMAggregateArgs>(args: Subset<T, ProductPlanRMAggregateArgs>): Prisma.PrismaPromise<GetProductPlanRMAggregateType<T>>

    /**
     * Group by ProductPlanRM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPlanRMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductPlanRMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductPlanRMGroupByArgs['orderBy'] }
        : { orderBy?: ProductPlanRMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductPlanRMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductPlanRMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductPlanRM model
   */
  readonly fields: ProductPlanRMFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductPlanRM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductPlanRMClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productPlan<T extends ProductPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductPlanDefaultArgs<ExtArgs>>): Prisma__ProductPlanClient<$Result.GetResult<Prisma.$ProductPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rm<T extends RMDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RMDefaultArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductPlanRM model
   */
  interface ProductPlanRMFieldRefs {
    readonly id: FieldRef<"ProductPlanRM", 'Int'>
    readonly productPlanId: FieldRef<"ProductPlanRM", 'Int'>
    readonly rmCode: FieldRef<"ProductPlanRM", 'String'>
    readonly qtyUsed: FieldRef<"ProductPlanRM", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ProductPlanRM findUnique
   */
  export type ProductPlanRMFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlanRM to fetch.
     */
    where: ProductPlanRMWhereUniqueInput
  }

  /**
   * ProductPlanRM findUniqueOrThrow
   */
  export type ProductPlanRMFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlanRM to fetch.
     */
    where: ProductPlanRMWhereUniqueInput
  }

  /**
   * ProductPlanRM findFirst
   */
  export type ProductPlanRMFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlanRM to fetch.
     */
    where?: ProductPlanRMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlanRMS to fetch.
     */
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPlanRMS.
     */
    cursor?: ProductPlanRMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlanRMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlanRMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPlanRMS.
     */
    distinct?: ProductPlanRMScalarFieldEnum | ProductPlanRMScalarFieldEnum[]
  }

  /**
   * ProductPlanRM findFirstOrThrow
   */
  export type ProductPlanRMFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlanRM to fetch.
     */
    where?: ProductPlanRMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlanRMS to fetch.
     */
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPlanRMS.
     */
    cursor?: ProductPlanRMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlanRMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlanRMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPlanRMS.
     */
    distinct?: ProductPlanRMScalarFieldEnum | ProductPlanRMScalarFieldEnum[]
  }

  /**
   * ProductPlanRM findMany
   */
  export type ProductPlanRMFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter, which ProductPlanRMS to fetch.
     */
    where?: ProductPlanRMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPlanRMS to fetch.
     */
    orderBy?: ProductPlanRMOrderByWithRelationInput | ProductPlanRMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductPlanRMS.
     */
    cursor?: ProductPlanRMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPlanRMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPlanRMS.
     */
    skip?: number
    distinct?: ProductPlanRMScalarFieldEnum | ProductPlanRMScalarFieldEnum[]
  }

  /**
   * ProductPlanRM create
   */
  export type ProductPlanRMCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductPlanRM.
     */
    data: XOR<ProductPlanRMCreateInput, ProductPlanRMUncheckedCreateInput>
  }

  /**
   * ProductPlanRM createMany
   */
  export type ProductPlanRMCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductPlanRMS.
     */
    data: ProductPlanRMCreateManyInput | ProductPlanRMCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductPlanRM createManyAndReturn
   */
  export type ProductPlanRMCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * The data used to create many ProductPlanRMS.
     */
    data: ProductPlanRMCreateManyInput | ProductPlanRMCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductPlanRM update
   */
  export type ProductPlanRMUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductPlanRM.
     */
    data: XOR<ProductPlanRMUpdateInput, ProductPlanRMUncheckedUpdateInput>
    /**
     * Choose, which ProductPlanRM to update.
     */
    where: ProductPlanRMWhereUniqueInput
  }

  /**
   * ProductPlanRM updateMany
   */
  export type ProductPlanRMUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductPlanRMS.
     */
    data: XOR<ProductPlanRMUpdateManyMutationInput, ProductPlanRMUncheckedUpdateManyInput>
    /**
     * Filter which ProductPlanRMS to update
     */
    where?: ProductPlanRMWhereInput
    /**
     * Limit how many ProductPlanRMS to update.
     */
    limit?: number
  }

  /**
   * ProductPlanRM updateManyAndReturn
   */
  export type ProductPlanRMUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * The data used to update ProductPlanRMS.
     */
    data: XOR<ProductPlanRMUpdateManyMutationInput, ProductPlanRMUncheckedUpdateManyInput>
    /**
     * Filter which ProductPlanRMS to update
     */
    where?: ProductPlanRMWhereInput
    /**
     * Limit how many ProductPlanRMS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductPlanRM upsert
   */
  export type ProductPlanRMUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductPlanRM to update in case it exists.
     */
    where: ProductPlanRMWhereUniqueInput
    /**
     * In case the ProductPlanRM found by the `where` argument doesn't exist, create a new ProductPlanRM with this data.
     */
    create: XOR<ProductPlanRMCreateInput, ProductPlanRMUncheckedCreateInput>
    /**
     * In case the ProductPlanRM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductPlanRMUpdateInput, ProductPlanRMUncheckedUpdateInput>
  }

  /**
   * ProductPlanRM delete
   */
  export type ProductPlanRMDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
    /**
     * Filter which ProductPlanRM to delete.
     */
    where: ProductPlanRMWhereUniqueInput
  }

  /**
   * ProductPlanRM deleteMany
   */
  export type ProductPlanRMDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPlanRMS to delete
     */
    where?: ProductPlanRMWhereInput
    /**
     * Limit how many ProductPlanRMS to delete.
     */
    limit?: number
  }

  /**
   * ProductPlanRM without action
   */
  export type ProductPlanRMDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPlanRM
     */
    select?: ProductPlanRMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPlanRM
     */
    omit?: ProductPlanRMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPlanRMInclude<ExtArgs> | null
  }


  /**
   * Model Formula
   */

  export type AggregateFormula = {
    _count: FormulaCountAggregateOutputType | null
    _avg: FormulaAvgAggregateOutputType | null
    _sum: FormulaSumAggregateOutputType | null
    _min: FormulaMinAggregateOutputType | null
    _max: FormulaMaxAggregateOutputType | null
  }

  export type FormulaAvgAggregateOutputType = {
    id: number | null
    qtyPerLot: number | null
  }

  export type FormulaSumAggregateOutputType = {
    id: number | null
    qtyPerLot: number | null
  }

  export type FormulaMinAggregateOutputType = {
    id: number | null
    colorCode: string | null
    chemicalCode: string | null
    qtyPerLot: number | null
  }

  export type FormulaMaxAggregateOutputType = {
    id: number | null
    colorCode: string | null
    chemicalCode: string | null
    qtyPerLot: number | null
  }

  export type FormulaCountAggregateOutputType = {
    id: number
    colorCode: number
    chemicalCode: number
    qtyPerLot: number
    _all: number
  }


  export type FormulaAvgAggregateInputType = {
    id?: true
    qtyPerLot?: true
  }

  export type FormulaSumAggregateInputType = {
    id?: true
    qtyPerLot?: true
  }

  export type FormulaMinAggregateInputType = {
    id?: true
    colorCode?: true
    chemicalCode?: true
    qtyPerLot?: true
  }

  export type FormulaMaxAggregateInputType = {
    id?: true
    colorCode?: true
    chemicalCode?: true
    qtyPerLot?: true
  }

  export type FormulaCountAggregateInputType = {
    id?: true
    colorCode?: true
    chemicalCode?: true
    qtyPerLot?: true
    _all?: true
  }

  export type FormulaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Formula to aggregate.
     */
    where?: FormulaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formulas to fetch.
     */
    orderBy?: FormulaOrderByWithRelationInput | FormulaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormulaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formulas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formulas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Formulas
    **/
    _count?: true | FormulaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormulaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormulaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormulaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormulaMaxAggregateInputType
  }

  export type GetFormulaAggregateType<T extends FormulaAggregateArgs> = {
        [P in keyof T & keyof AggregateFormula]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormula[P]>
      : GetScalarType<T[P], AggregateFormula[P]>
  }




  export type FormulaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormulaWhereInput
    orderBy?: FormulaOrderByWithAggregationInput | FormulaOrderByWithAggregationInput[]
    by: FormulaScalarFieldEnum[] | FormulaScalarFieldEnum
    having?: FormulaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormulaCountAggregateInputType | true
    _avg?: FormulaAvgAggregateInputType
    _sum?: FormulaSumAggregateInputType
    _min?: FormulaMinAggregateInputType
    _max?: FormulaMaxAggregateInputType
  }

  export type FormulaGroupByOutputType = {
    id: number
    colorCode: string
    chemicalCode: string
    qtyPerLot: number | null
    _count: FormulaCountAggregateOutputType | null
    _avg: FormulaAvgAggregateOutputType | null
    _sum: FormulaSumAggregateOutputType | null
    _min: FormulaMinAggregateOutputType | null
    _max: FormulaMaxAggregateOutputType | null
  }

  type GetFormulaGroupByPayload<T extends FormulaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormulaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormulaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormulaGroupByOutputType[P]>
            : GetScalarType<T[P], FormulaGroupByOutputType[P]>
        }
      >
    >


  export type FormulaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    chemicalCode?: boolean
    qtyPerLot?: boolean
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }, ExtArgs["result"]["formula"]>

  export type FormulaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    chemicalCode?: boolean
    qtyPerLot?: boolean
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }, ExtArgs["result"]["formula"]>

  export type FormulaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorCode?: boolean
    chemicalCode?: boolean
    qtyPerLot?: boolean
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }, ExtArgs["result"]["formula"]>

  export type FormulaSelectScalar = {
    id?: boolean
    colorCode?: boolean
    chemicalCode?: boolean
    qtyPerLot?: boolean
  }

  export type FormulaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "colorCode" | "chemicalCode" | "qtyPerLot", ExtArgs["result"]["formula"]>
  export type FormulaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }
  export type FormulaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }
  export type FormulaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chemical?: boolean | Formula$chemicalArgs<ExtArgs>
  }

  export type $FormulaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Formula"
    objects: {
      chemical: Prisma.$RMPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      colorCode: string
      chemicalCode: string
      qtyPerLot: number | null
    }, ExtArgs["result"]["formula"]>
    composites: {}
  }

  type FormulaGetPayload<S extends boolean | null | undefined | FormulaDefaultArgs> = $Result.GetResult<Prisma.$FormulaPayload, S>

  type FormulaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FormulaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FormulaCountAggregateInputType | true
    }

  export interface FormulaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Formula'], meta: { name: 'Formula' } }
    /**
     * Find zero or one Formula that matches the filter.
     * @param {FormulaFindUniqueArgs} args - Arguments to find a Formula
     * @example
     * // Get one Formula
     * const formula = await prisma.formula.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormulaFindUniqueArgs>(args: SelectSubset<T, FormulaFindUniqueArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Formula that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FormulaFindUniqueOrThrowArgs} args - Arguments to find a Formula
     * @example
     * // Get one Formula
     * const formula = await prisma.formula.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormulaFindUniqueOrThrowArgs>(args: SelectSubset<T, FormulaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Formula that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaFindFirstArgs} args - Arguments to find a Formula
     * @example
     * // Get one Formula
     * const formula = await prisma.formula.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormulaFindFirstArgs>(args?: SelectSubset<T, FormulaFindFirstArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Formula that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaFindFirstOrThrowArgs} args - Arguments to find a Formula
     * @example
     * // Get one Formula
     * const formula = await prisma.formula.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormulaFindFirstOrThrowArgs>(args?: SelectSubset<T, FormulaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Formulas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Formulas
     * const formulas = await prisma.formula.findMany()
     * 
     * // Get first 10 Formulas
     * const formulas = await prisma.formula.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formulaWithIdOnly = await prisma.formula.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormulaFindManyArgs>(args?: SelectSubset<T, FormulaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Formula.
     * @param {FormulaCreateArgs} args - Arguments to create a Formula.
     * @example
     * // Create one Formula
     * const Formula = await prisma.formula.create({
     *   data: {
     *     // ... data to create a Formula
     *   }
     * })
     * 
     */
    create<T extends FormulaCreateArgs>(args: SelectSubset<T, FormulaCreateArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Formulas.
     * @param {FormulaCreateManyArgs} args - Arguments to create many Formulas.
     * @example
     * // Create many Formulas
     * const formula = await prisma.formula.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormulaCreateManyArgs>(args?: SelectSubset<T, FormulaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Formulas and returns the data saved in the database.
     * @param {FormulaCreateManyAndReturnArgs} args - Arguments to create many Formulas.
     * @example
     * // Create many Formulas
     * const formula = await prisma.formula.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Formulas and only return the `id`
     * const formulaWithIdOnly = await prisma.formula.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormulaCreateManyAndReturnArgs>(args?: SelectSubset<T, FormulaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Formula.
     * @param {FormulaDeleteArgs} args - Arguments to delete one Formula.
     * @example
     * // Delete one Formula
     * const Formula = await prisma.formula.delete({
     *   where: {
     *     // ... filter to delete one Formula
     *   }
     * })
     * 
     */
    delete<T extends FormulaDeleteArgs>(args: SelectSubset<T, FormulaDeleteArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Formula.
     * @param {FormulaUpdateArgs} args - Arguments to update one Formula.
     * @example
     * // Update one Formula
     * const formula = await prisma.formula.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormulaUpdateArgs>(args: SelectSubset<T, FormulaUpdateArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Formulas.
     * @param {FormulaDeleteManyArgs} args - Arguments to filter Formulas to delete.
     * @example
     * // Delete a few Formulas
     * const { count } = await prisma.formula.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormulaDeleteManyArgs>(args?: SelectSubset<T, FormulaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formulas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Formulas
     * const formula = await prisma.formula.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormulaUpdateManyArgs>(args: SelectSubset<T, FormulaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formulas and returns the data updated in the database.
     * @param {FormulaUpdateManyAndReturnArgs} args - Arguments to update many Formulas.
     * @example
     * // Update many Formulas
     * const formula = await prisma.formula.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Formulas and only return the `id`
     * const formulaWithIdOnly = await prisma.formula.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FormulaUpdateManyAndReturnArgs>(args: SelectSubset<T, FormulaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Formula.
     * @param {FormulaUpsertArgs} args - Arguments to update or create a Formula.
     * @example
     * // Update or create a Formula
     * const formula = await prisma.formula.upsert({
     *   create: {
     *     // ... data to create a Formula
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Formula we want to update
     *   }
     * })
     */
    upsert<T extends FormulaUpsertArgs>(args: SelectSubset<T, FormulaUpsertArgs<ExtArgs>>): Prisma__FormulaClient<$Result.GetResult<Prisma.$FormulaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Formulas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaCountArgs} args - Arguments to filter Formulas to count.
     * @example
     * // Count the number of Formulas
     * const count = await prisma.formula.count({
     *   where: {
     *     // ... the filter for the Formulas we want to count
     *   }
     * })
    **/
    count<T extends FormulaCountArgs>(
      args?: Subset<T, FormulaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormulaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Formula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormulaAggregateArgs>(args: Subset<T, FormulaAggregateArgs>): Prisma.PrismaPromise<GetFormulaAggregateType<T>>

    /**
     * Group by Formula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormulaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormulaGroupByArgs['orderBy'] }
        : { orderBy?: FormulaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormulaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormulaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Formula model
   */
  readonly fields: FormulaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Formula.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormulaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chemical<T extends Formula$chemicalArgs<ExtArgs> = {}>(args?: Subset<T, Formula$chemicalArgs<ExtArgs>>): Prisma__RMClient<$Result.GetResult<Prisma.$RMPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Formula model
   */
  interface FormulaFieldRefs {
    readonly id: FieldRef<"Formula", 'Int'>
    readonly colorCode: FieldRef<"Formula", 'String'>
    readonly chemicalCode: FieldRef<"Formula", 'String'>
    readonly qtyPerLot: FieldRef<"Formula", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Formula findUnique
   */
  export type FormulaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter, which Formula to fetch.
     */
    where: FormulaWhereUniqueInput
  }

  /**
   * Formula findUniqueOrThrow
   */
  export type FormulaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter, which Formula to fetch.
     */
    where: FormulaWhereUniqueInput
  }

  /**
   * Formula findFirst
   */
  export type FormulaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter, which Formula to fetch.
     */
    where?: FormulaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formulas to fetch.
     */
    orderBy?: FormulaOrderByWithRelationInput | FormulaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formulas.
     */
    cursor?: FormulaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formulas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formulas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formulas.
     */
    distinct?: FormulaScalarFieldEnum | FormulaScalarFieldEnum[]
  }

  /**
   * Formula findFirstOrThrow
   */
  export type FormulaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter, which Formula to fetch.
     */
    where?: FormulaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formulas to fetch.
     */
    orderBy?: FormulaOrderByWithRelationInput | FormulaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formulas.
     */
    cursor?: FormulaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formulas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formulas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formulas.
     */
    distinct?: FormulaScalarFieldEnum | FormulaScalarFieldEnum[]
  }

  /**
   * Formula findMany
   */
  export type FormulaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter, which Formulas to fetch.
     */
    where?: FormulaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formulas to fetch.
     */
    orderBy?: FormulaOrderByWithRelationInput | FormulaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Formulas.
     */
    cursor?: FormulaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formulas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formulas.
     */
    skip?: number
    distinct?: FormulaScalarFieldEnum | FormulaScalarFieldEnum[]
  }

  /**
   * Formula create
   */
  export type FormulaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * The data needed to create a Formula.
     */
    data: XOR<FormulaCreateInput, FormulaUncheckedCreateInput>
  }

  /**
   * Formula createMany
   */
  export type FormulaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Formulas.
     */
    data: FormulaCreateManyInput | FormulaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Formula createManyAndReturn
   */
  export type FormulaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * The data used to create many Formulas.
     */
    data: FormulaCreateManyInput | FormulaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Formula update
   */
  export type FormulaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * The data needed to update a Formula.
     */
    data: XOR<FormulaUpdateInput, FormulaUncheckedUpdateInput>
    /**
     * Choose, which Formula to update.
     */
    where: FormulaWhereUniqueInput
  }

  /**
   * Formula updateMany
   */
  export type FormulaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Formulas.
     */
    data: XOR<FormulaUpdateManyMutationInput, FormulaUncheckedUpdateManyInput>
    /**
     * Filter which Formulas to update
     */
    where?: FormulaWhereInput
    /**
     * Limit how many Formulas to update.
     */
    limit?: number
  }

  /**
   * Formula updateManyAndReturn
   */
  export type FormulaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * The data used to update Formulas.
     */
    data: XOR<FormulaUpdateManyMutationInput, FormulaUncheckedUpdateManyInput>
    /**
     * Filter which Formulas to update
     */
    where?: FormulaWhereInput
    /**
     * Limit how many Formulas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Formula upsert
   */
  export type FormulaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * The filter to search for the Formula to update in case it exists.
     */
    where: FormulaWhereUniqueInput
    /**
     * In case the Formula found by the `where` argument doesn't exist, create a new Formula with this data.
     */
    create: XOR<FormulaCreateInput, FormulaUncheckedCreateInput>
    /**
     * In case the Formula was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormulaUpdateInput, FormulaUncheckedUpdateInput>
  }

  /**
   * Formula delete
   */
  export type FormulaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
    /**
     * Filter which Formula to delete.
     */
    where: FormulaWhereUniqueInput
  }

  /**
   * Formula deleteMany
   */
  export type FormulaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Formulas to delete
     */
    where?: FormulaWhereInput
    /**
     * Limit how many Formulas to delete.
     */
    limit?: number
  }

  /**
   * Formula.chemical
   */
  export type Formula$chemicalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RM
     */
    select?: RMSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RM
     */
    omit?: RMOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RMInclude<ExtArgs> | null
    where?: RMWhereInput
  }

  /**
   * Formula without action
   */
  export type FormulaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formula
     */
    select?: FormulaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formula
     */
    omit?: FormulaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RMScalarFieldEnum: {
    code: 'code',
    name: 'name',
    g_total: 'g_total',
    order: 'order'
  };

  export type RMScalarFieldEnum = (typeof RMScalarFieldEnum)[keyof typeof RMScalarFieldEnum]


  export const ProductPlanScalarFieldEnum: {
    id: 'id',
    colorCode: 'colorCode',
    lot: 'lot',
    percent: 'percent',
    date: 'date',
    department: 'department'
  };

  export type ProductPlanScalarFieldEnum = (typeof ProductPlanScalarFieldEnum)[keyof typeof ProductPlanScalarFieldEnum]


  export const ProductPlanRMScalarFieldEnum: {
    id: 'id',
    productPlanId: 'productPlanId',
    rmCode: 'rmCode',
    qtyUsed: 'qtyUsed'
  };

  export type ProductPlanRMScalarFieldEnum = (typeof ProductPlanRMScalarFieldEnum)[keyof typeof ProductPlanRMScalarFieldEnum]


  export const FormulaScalarFieldEnum: {
    id: 'id',
    colorCode: 'colorCode',
    chemicalCode: 'chemicalCode',
    qtyPerLot: 'qtyPerLot'
  };

  export type FormulaScalarFieldEnum = (typeof FormulaScalarFieldEnum)[keyof typeof FormulaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type RMWhereInput = {
    AND?: RMWhereInput | RMWhereInput[]
    OR?: RMWhereInput[]
    NOT?: RMWhereInput | RMWhereInput[]
    code?: StringFilter<"RM"> | string
    name?: StringNullableFilter<"RM"> | string | null
    g_total?: FloatNullableFilter<"RM"> | number | null
    order?: IntNullableFilter<"RM"> | number | null
    formulas?: FormulaListRelationFilter
    productPlanRMs?: ProductPlanRMListRelationFilter
  }

  export type RMOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrderInput | SortOrder
    g_total?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    formulas?: FormulaOrderByRelationAggregateInput
    productPlanRMs?: ProductPlanRMOrderByRelationAggregateInput
  }

  export type RMWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: RMWhereInput | RMWhereInput[]
    OR?: RMWhereInput[]
    NOT?: RMWhereInput | RMWhereInput[]
    name?: StringNullableFilter<"RM"> | string | null
    g_total?: FloatNullableFilter<"RM"> | number | null
    order?: IntNullableFilter<"RM"> | number | null
    formulas?: FormulaListRelationFilter
    productPlanRMs?: ProductPlanRMListRelationFilter
  }, "code">

  export type RMOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrderInput | SortOrder
    g_total?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: RMCountOrderByAggregateInput
    _avg?: RMAvgOrderByAggregateInput
    _max?: RMMaxOrderByAggregateInput
    _min?: RMMinOrderByAggregateInput
    _sum?: RMSumOrderByAggregateInput
  }

  export type RMScalarWhereWithAggregatesInput = {
    AND?: RMScalarWhereWithAggregatesInput | RMScalarWhereWithAggregatesInput[]
    OR?: RMScalarWhereWithAggregatesInput[]
    NOT?: RMScalarWhereWithAggregatesInput | RMScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"RM"> | string
    name?: StringNullableWithAggregatesFilter<"RM"> | string | null
    g_total?: FloatNullableWithAggregatesFilter<"RM"> | number | null
    order?: IntNullableWithAggregatesFilter<"RM"> | number | null
  }

  export type ProductPlanWhereInput = {
    AND?: ProductPlanWhereInput | ProductPlanWhereInput[]
    OR?: ProductPlanWhereInput[]
    NOT?: ProductPlanWhereInput | ProductPlanWhereInput[]
    id?: IntFilter<"ProductPlan"> | number
    colorCode?: StringFilter<"ProductPlan"> | string
    lot?: StringFilter<"ProductPlan"> | string
    percent?: FloatFilter<"ProductPlan"> | number
    date?: DateTimeFilter<"ProductPlan"> | Date | string
    department?: StringFilter<"ProductPlan"> | string
    rms?: ProductPlanRMListRelationFilter
  }

  export type ProductPlanOrderByWithRelationInput = {
    id?: SortOrder
    colorCode?: SortOrder
    lot?: SortOrder
    percent?: SortOrder
    date?: SortOrder
    department?: SortOrder
    rms?: ProductPlanRMOrderByRelationAggregateInput
  }

  export type ProductPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductPlanWhereInput | ProductPlanWhereInput[]
    OR?: ProductPlanWhereInput[]
    NOT?: ProductPlanWhereInput | ProductPlanWhereInput[]
    colorCode?: StringFilter<"ProductPlan"> | string
    lot?: StringFilter<"ProductPlan"> | string
    percent?: FloatFilter<"ProductPlan"> | number
    date?: DateTimeFilter<"ProductPlan"> | Date | string
    department?: StringFilter<"ProductPlan"> | string
    rms?: ProductPlanRMListRelationFilter
  }, "id">

  export type ProductPlanOrderByWithAggregationInput = {
    id?: SortOrder
    colorCode?: SortOrder
    lot?: SortOrder
    percent?: SortOrder
    date?: SortOrder
    department?: SortOrder
    _count?: ProductPlanCountOrderByAggregateInput
    _avg?: ProductPlanAvgOrderByAggregateInput
    _max?: ProductPlanMaxOrderByAggregateInput
    _min?: ProductPlanMinOrderByAggregateInput
    _sum?: ProductPlanSumOrderByAggregateInput
  }

  export type ProductPlanScalarWhereWithAggregatesInput = {
    AND?: ProductPlanScalarWhereWithAggregatesInput | ProductPlanScalarWhereWithAggregatesInput[]
    OR?: ProductPlanScalarWhereWithAggregatesInput[]
    NOT?: ProductPlanScalarWhereWithAggregatesInput | ProductPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductPlan"> | number
    colorCode?: StringWithAggregatesFilter<"ProductPlan"> | string
    lot?: StringWithAggregatesFilter<"ProductPlan"> | string
    percent?: FloatWithAggregatesFilter<"ProductPlan"> | number
    date?: DateTimeWithAggregatesFilter<"ProductPlan"> | Date | string
    department?: StringWithAggregatesFilter<"ProductPlan"> | string
  }

  export type ProductPlanRMWhereInput = {
    AND?: ProductPlanRMWhereInput | ProductPlanRMWhereInput[]
    OR?: ProductPlanRMWhereInput[]
    NOT?: ProductPlanRMWhereInput | ProductPlanRMWhereInput[]
    id?: IntFilter<"ProductPlanRM"> | number
    productPlanId?: IntFilter<"ProductPlanRM"> | number
    rmCode?: StringFilter<"ProductPlanRM"> | string
    qtyUsed?: FloatFilter<"ProductPlanRM"> | number
    productPlan?: XOR<ProductPlanScalarRelationFilter, ProductPlanWhereInput>
    rm?: XOR<RMScalarRelationFilter, RMWhereInput>
  }

  export type ProductPlanRMOrderByWithRelationInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    rmCode?: SortOrder
    qtyUsed?: SortOrder
    productPlan?: ProductPlanOrderByWithRelationInput
    rm?: RMOrderByWithRelationInput
  }

  export type ProductPlanRMWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductPlanRMWhereInput | ProductPlanRMWhereInput[]
    OR?: ProductPlanRMWhereInput[]
    NOT?: ProductPlanRMWhereInput | ProductPlanRMWhereInput[]
    productPlanId?: IntFilter<"ProductPlanRM"> | number
    rmCode?: StringFilter<"ProductPlanRM"> | string
    qtyUsed?: FloatFilter<"ProductPlanRM"> | number
    productPlan?: XOR<ProductPlanScalarRelationFilter, ProductPlanWhereInput>
    rm?: XOR<RMScalarRelationFilter, RMWhereInput>
  }, "id">

  export type ProductPlanRMOrderByWithAggregationInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    rmCode?: SortOrder
    qtyUsed?: SortOrder
    _count?: ProductPlanRMCountOrderByAggregateInput
    _avg?: ProductPlanRMAvgOrderByAggregateInput
    _max?: ProductPlanRMMaxOrderByAggregateInput
    _min?: ProductPlanRMMinOrderByAggregateInput
    _sum?: ProductPlanRMSumOrderByAggregateInput
  }

  export type ProductPlanRMScalarWhereWithAggregatesInput = {
    AND?: ProductPlanRMScalarWhereWithAggregatesInput | ProductPlanRMScalarWhereWithAggregatesInput[]
    OR?: ProductPlanRMScalarWhereWithAggregatesInput[]
    NOT?: ProductPlanRMScalarWhereWithAggregatesInput | ProductPlanRMScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductPlanRM"> | number
    productPlanId?: IntWithAggregatesFilter<"ProductPlanRM"> | number
    rmCode?: StringWithAggregatesFilter<"ProductPlanRM"> | string
    qtyUsed?: FloatWithAggregatesFilter<"ProductPlanRM"> | number
  }

  export type FormulaWhereInput = {
    AND?: FormulaWhereInput | FormulaWhereInput[]
    OR?: FormulaWhereInput[]
    NOT?: FormulaWhereInput | FormulaWhereInput[]
    id?: IntFilter<"Formula"> | number
    colorCode?: StringFilter<"Formula"> | string
    chemicalCode?: StringFilter<"Formula"> | string
    qtyPerLot?: FloatNullableFilter<"Formula"> | number | null
    chemical?: XOR<RMNullableScalarRelationFilter, RMWhereInput> | null
  }

  export type FormulaOrderByWithRelationInput = {
    id?: SortOrder
    colorCode?: SortOrder
    chemicalCode?: SortOrder
    qtyPerLot?: SortOrderInput | SortOrder
    chemical?: RMOrderByWithRelationInput
  }

  export type FormulaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FormulaWhereInput | FormulaWhereInput[]
    OR?: FormulaWhereInput[]
    NOT?: FormulaWhereInput | FormulaWhereInput[]
    colorCode?: StringFilter<"Formula"> | string
    chemicalCode?: StringFilter<"Formula"> | string
    qtyPerLot?: FloatNullableFilter<"Formula"> | number | null
    chemical?: XOR<RMNullableScalarRelationFilter, RMWhereInput> | null
  }, "id">

  export type FormulaOrderByWithAggregationInput = {
    id?: SortOrder
    colorCode?: SortOrder
    chemicalCode?: SortOrder
    qtyPerLot?: SortOrderInput | SortOrder
    _count?: FormulaCountOrderByAggregateInput
    _avg?: FormulaAvgOrderByAggregateInput
    _max?: FormulaMaxOrderByAggregateInput
    _min?: FormulaMinOrderByAggregateInput
    _sum?: FormulaSumOrderByAggregateInput
  }

  export type FormulaScalarWhereWithAggregatesInput = {
    AND?: FormulaScalarWhereWithAggregatesInput | FormulaScalarWhereWithAggregatesInput[]
    OR?: FormulaScalarWhereWithAggregatesInput[]
    NOT?: FormulaScalarWhereWithAggregatesInput | FormulaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Formula"> | number
    colorCode?: StringWithAggregatesFilter<"Formula"> | string
    chemicalCode?: StringWithAggregatesFilter<"Formula"> | string
    qtyPerLot?: FloatNullableWithAggregatesFilter<"Formula"> | number | null
  }

  export type RMCreateInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    formulas?: FormulaCreateNestedManyWithoutChemicalInput
    productPlanRMs?: ProductPlanRMCreateNestedManyWithoutRmInput
  }

  export type RMUncheckedCreateInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    formulas?: FormulaUncheckedCreateNestedManyWithoutChemicalInput
    productPlanRMs?: ProductPlanRMUncheckedCreateNestedManyWithoutRmInput
  }

  export type RMUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    formulas?: FormulaUpdateManyWithoutChemicalNestedInput
    productPlanRMs?: ProductPlanRMUpdateManyWithoutRmNestedInput
  }

  export type RMUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    formulas?: FormulaUncheckedUpdateManyWithoutChemicalNestedInput
    productPlanRMs?: ProductPlanRMUncheckedUpdateManyWithoutRmNestedInput
  }

  export type RMCreateManyInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
  }

  export type RMUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RMUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductPlanCreateInput = {
    colorCode: string
    lot: string
    percent: number
    date: Date | string
    department: string
    rms?: ProductPlanRMCreateNestedManyWithoutProductPlanInput
  }

  export type ProductPlanUncheckedCreateInput = {
    id?: number
    colorCode: string
    lot: string
    percent: number
    date: Date | string
    department: string
    rms?: ProductPlanRMUncheckedCreateNestedManyWithoutProductPlanInput
  }

  export type ProductPlanUpdateInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    rms?: ProductPlanRMUpdateManyWithoutProductPlanNestedInput
  }

  export type ProductPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    rms?: ProductPlanRMUncheckedUpdateManyWithoutProductPlanNestedInput
  }

  export type ProductPlanCreateManyInput = {
    id?: number
    colorCode: string
    lot: string
    percent: number
    date: Date | string
    department: string
  }

  export type ProductPlanUpdateManyMutationInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
  }

  export type ProductPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
  }

  export type ProductPlanRMCreateInput = {
    qtyUsed: number
    productPlan: ProductPlanCreateNestedOneWithoutRmsInput
    rm: RMCreateNestedOneWithoutProductPlanRMsInput
  }

  export type ProductPlanRMUncheckedCreateInput = {
    id?: number
    productPlanId: number
    rmCode: string
    qtyUsed: number
  }

  export type ProductPlanRMUpdateInput = {
    qtyUsed?: FloatFieldUpdateOperationsInput | number
    productPlan?: ProductPlanUpdateOneRequiredWithoutRmsNestedInput
    rm?: RMUpdateOneRequiredWithoutProductPlanRMsNestedInput
  }

  export type ProductPlanRMUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productPlanId?: IntFieldUpdateOperationsInput | number
    rmCode?: StringFieldUpdateOperationsInput | string
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductPlanRMCreateManyInput = {
    id?: number
    productPlanId: number
    rmCode: string
    qtyUsed: number
  }

  export type ProductPlanRMUpdateManyMutationInput = {
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductPlanRMUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productPlanId?: IntFieldUpdateOperationsInput | number
    rmCode?: StringFieldUpdateOperationsInput | string
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type FormulaCreateInput = {
    colorCode: string
    qtyPerLot?: number | null
    chemical?: RMCreateNestedOneWithoutFormulasInput
  }

  export type FormulaUncheckedCreateInput = {
    id?: number
    colorCode: string
    chemicalCode: string
    qtyPerLot?: number | null
  }

  export type FormulaUpdateInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
    chemical?: RMUpdateOneWithoutFormulasNestedInput
  }

  export type FormulaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    chemicalCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FormulaCreateManyInput = {
    id?: number
    colorCode: string
    chemicalCode: string
    qtyPerLot?: number | null
  }

  export type FormulaUpdateManyMutationInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FormulaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    chemicalCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FormulaListRelationFilter = {
    every?: FormulaWhereInput
    some?: FormulaWhereInput
    none?: FormulaWhereInput
  }

  export type ProductPlanRMListRelationFilter = {
    every?: ProductPlanRMWhereInput
    some?: ProductPlanRMWhereInput
    none?: ProductPlanRMWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FormulaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductPlanRMOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RMCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    g_total?: SortOrder
    order?: SortOrder
  }

  export type RMAvgOrderByAggregateInput = {
    g_total?: SortOrder
    order?: SortOrder
  }

  export type RMMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    g_total?: SortOrder
    order?: SortOrder
  }

  export type RMMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    g_total?: SortOrder
    order?: SortOrder
  }

  export type RMSumOrderByAggregateInput = {
    g_total?: SortOrder
    order?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductPlanCountOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    lot?: SortOrder
    percent?: SortOrder
    date?: SortOrder
    department?: SortOrder
  }

  export type ProductPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    percent?: SortOrder
  }

  export type ProductPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    lot?: SortOrder
    percent?: SortOrder
    date?: SortOrder
    department?: SortOrder
  }

  export type ProductPlanMinOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    lot?: SortOrder
    percent?: SortOrder
    date?: SortOrder
    department?: SortOrder
  }

  export type ProductPlanSumOrderByAggregateInput = {
    id?: SortOrder
    percent?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProductPlanScalarRelationFilter = {
    is?: ProductPlanWhereInput
    isNot?: ProductPlanWhereInput
  }

  export type RMScalarRelationFilter = {
    is?: RMWhereInput
    isNot?: RMWhereInput
  }

  export type ProductPlanRMCountOrderByAggregateInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    rmCode?: SortOrder
    qtyUsed?: SortOrder
  }

  export type ProductPlanRMAvgOrderByAggregateInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    qtyUsed?: SortOrder
  }

  export type ProductPlanRMMaxOrderByAggregateInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    rmCode?: SortOrder
    qtyUsed?: SortOrder
  }

  export type ProductPlanRMMinOrderByAggregateInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    rmCode?: SortOrder
    qtyUsed?: SortOrder
  }

  export type ProductPlanRMSumOrderByAggregateInput = {
    id?: SortOrder
    productPlanId?: SortOrder
    qtyUsed?: SortOrder
  }

  export type RMNullableScalarRelationFilter = {
    is?: RMWhereInput | null
    isNot?: RMWhereInput | null
  }

  export type FormulaCountOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    chemicalCode?: SortOrder
    qtyPerLot?: SortOrder
  }

  export type FormulaAvgOrderByAggregateInput = {
    id?: SortOrder
    qtyPerLot?: SortOrder
  }

  export type FormulaMaxOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    chemicalCode?: SortOrder
    qtyPerLot?: SortOrder
  }

  export type FormulaMinOrderByAggregateInput = {
    id?: SortOrder
    colorCode?: SortOrder
    chemicalCode?: SortOrder
    qtyPerLot?: SortOrder
  }

  export type FormulaSumOrderByAggregateInput = {
    id?: SortOrder
    qtyPerLot?: SortOrder
  }

  export type FormulaCreateNestedManyWithoutChemicalInput = {
    create?: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput> | FormulaCreateWithoutChemicalInput[] | FormulaUncheckedCreateWithoutChemicalInput[]
    connectOrCreate?: FormulaCreateOrConnectWithoutChemicalInput | FormulaCreateOrConnectWithoutChemicalInput[]
    createMany?: FormulaCreateManyChemicalInputEnvelope
    connect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
  }

  export type ProductPlanRMCreateNestedManyWithoutRmInput = {
    create?: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput> | ProductPlanRMCreateWithoutRmInput[] | ProductPlanRMUncheckedCreateWithoutRmInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutRmInput | ProductPlanRMCreateOrConnectWithoutRmInput[]
    createMany?: ProductPlanRMCreateManyRmInputEnvelope
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
  }

  export type FormulaUncheckedCreateNestedManyWithoutChemicalInput = {
    create?: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput> | FormulaCreateWithoutChemicalInput[] | FormulaUncheckedCreateWithoutChemicalInput[]
    connectOrCreate?: FormulaCreateOrConnectWithoutChemicalInput | FormulaCreateOrConnectWithoutChemicalInput[]
    createMany?: FormulaCreateManyChemicalInputEnvelope
    connect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
  }

  export type ProductPlanRMUncheckedCreateNestedManyWithoutRmInput = {
    create?: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput> | ProductPlanRMCreateWithoutRmInput[] | ProductPlanRMUncheckedCreateWithoutRmInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutRmInput | ProductPlanRMCreateOrConnectWithoutRmInput[]
    createMany?: ProductPlanRMCreateManyRmInputEnvelope
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FormulaUpdateManyWithoutChemicalNestedInput = {
    create?: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput> | FormulaCreateWithoutChemicalInput[] | FormulaUncheckedCreateWithoutChemicalInput[]
    connectOrCreate?: FormulaCreateOrConnectWithoutChemicalInput | FormulaCreateOrConnectWithoutChemicalInput[]
    upsert?: FormulaUpsertWithWhereUniqueWithoutChemicalInput | FormulaUpsertWithWhereUniqueWithoutChemicalInput[]
    createMany?: FormulaCreateManyChemicalInputEnvelope
    set?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    disconnect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    delete?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    connect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    update?: FormulaUpdateWithWhereUniqueWithoutChemicalInput | FormulaUpdateWithWhereUniqueWithoutChemicalInput[]
    updateMany?: FormulaUpdateManyWithWhereWithoutChemicalInput | FormulaUpdateManyWithWhereWithoutChemicalInput[]
    deleteMany?: FormulaScalarWhereInput | FormulaScalarWhereInput[]
  }

  export type ProductPlanRMUpdateManyWithoutRmNestedInput = {
    create?: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput> | ProductPlanRMCreateWithoutRmInput[] | ProductPlanRMUncheckedCreateWithoutRmInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutRmInput | ProductPlanRMCreateOrConnectWithoutRmInput[]
    upsert?: ProductPlanRMUpsertWithWhereUniqueWithoutRmInput | ProductPlanRMUpsertWithWhereUniqueWithoutRmInput[]
    createMany?: ProductPlanRMCreateManyRmInputEnvelope
    set?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    disconnect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    delete?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    update?: ProductPlanRMUpdateWithWhereUniqueWithoutRmInput | ProductPlanRMUpdateWithWhereUniqueWithoutRmInput[]
    updateMany?: ProductPlanRMUpdateManyWithWhereWithoutRmInput | ProductPlanRMUpdateManyWithWhereWithoutRmInput[]
    deleteMany?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
  }

  export type FormulaUncheckedUpdateManyWithoutChemicalNestedInput = {
    create?: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput> | FormulaCreateWithoutChemicalInput[] | FormulaUncheckedCreateWithoutChemicalInput[]
    connectOrCreate?: FormulaCreateOrConnectWithoutChemicalInput | FormulaCreateOrConnectWithoutChemicalInput[]
    upsert?: FormulaUpsertWithWhereUniqueWithoutChemicalInput | FormulaUpsertWithWhereUniqueWithoutChemicalInput[]
    createMany?: FormulaCreateManyChemicalInputEnvelope
    set?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    disconnect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    delete?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    connect?: FormulaWhereUniqueInput | FormulaWhereUniqueInput[]
    update?: FormulaUpdateWithWhereUniqueWithoutChemicalInput | FormulaUpdateWithWhereUniqueWithoutChemicalInput[]
    updateMany?: FormulaUpdateManyWithWhereWithoutChemicalInput | FormulaUpdateManyWithWhereWithoutChemicalInput[]
    deleteMany?: FormulaScalarWhereInput | FormulaScalarWhereInput[]
  }

  export type ProductPlanRMUncheckedUpdateManyWithoutRmNestedInput = {
    create?: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput> | ProductPlanRMCreateWithoutRmInput[] | ProductPlanRMUncheckedCreateWithoutRmInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutRmInput | ProductPlanRMCreateOrConnectWithoutRmInput[]
    upsert?: ProductPlanRMUpsertWithWhereUniqueWithoutRmInput | ProductPlanRMUpsertWithWhereUniqueWithoutRmInput[]
    createMany?: ProductPlanRMCreateManyRmInputEnvelope
    set?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    disconnect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    delete?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    update?: ProductPlanRMUpdateWithWhereUniqueWithoutRmInput | ProductPlanRMUpdateWithWhereUniqueWithoutRmInput[]
    updateMany?: ProductPlanRMUpdateManyWithWhereWithoutRmInput | ProductPlanRMUpdateManyWithWhereWithoutRmInput[]
    deleteMany?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
  }

  export type ProductPlanRMCreateNestedManyWithoutProductPlanInput = {
    create?: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput> | ProductPlanRMCreateWithoutProductPlanInput[] | ProductPlanRMUncheckedCreateWithoutProductPlanInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutProductPlanInput | ProductPlanRMCreateOrConnectWithoutProductPlanInput[]
    createMany?: ProductPlanRMCreateManyProductPlanInputEnvelope
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
  }

  export type ProductPlanRMUncheckedCreateNestedManyWithoutProductPlanInput = {
    create?: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput> | ProductPlanRMCreateWithoutProductPlanInput[] | ProductPlanRMUncheckedCreateWithoutProductPlanInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutProductPlanInput | ProductPlanRMCreateOrConnectWithoutProductPlanInput[]
    createMany?: ProductPlanRMCreateManyProductPlanInputEnvelope
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductPlanRMUpdateManyWithoutProductPlanNestedInput = {
    create?: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput> | ProductPlanRMCreateWithoutProductPlanInput[] | ProductPlanRMUncheckedCreateWithoutProductPlanInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutProductPlanInput | ProductPlanRMCreateOrConnectWithoutProductPlanInput[]
    upsert?: ProductPlanRMUpsertWithWhereUniqueWithoutProductPlanInput | ProductPlanRMUpsertWithWhereUniqueWithoutProductPlanInput[]
    createMany?: ProductPlanRMCreateManyProductPlanInputEnvelope
    set?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    disconnect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    delete?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    update?: ProductPlanRMUpdateWithWhereUniqueWithoutProductPlanInput | ProductPlanRMUpdateWithWhereUniqueWithoutProductPlanInput[]
    updateMany?: ProductPlanRMUpdateManyWithWhereWithoutProductPlanInput | ProductPlanRMUpdateManyWithWhereWithoutProductPlanInput[]
    deleteMany?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductPlanRMUncheckedUpdateManyWithoutProductPlanNestedInput = {
    create?: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput> | ProductPlanRMCreateWithoutProductPlanInput[] | ProductPlanRMUncheckedCreateWithoutProductPlanInput[]
    connectOrCreate?: ProductPlanRMCreateOrConnectWithoutProductPlanInput | ProductPlanRMCreateOrConnectWithoutProductPlanInput[]
    upsert?: ProductPlanRMUpsertWithWhereUniqueWithoutProductPlanInput | ProductPlanRMUpsertWithWhereUniqueWithoutProductPlanInput[]
    createMany?: ProductPlanRMCreateManyProductPlanInputEnvelope
    set?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    disconnect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    delete?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    connect?: ProductPlanRMWhereUniqueInput | ProductPlanRMWhereUniqueInput[]
    update?: ProductPlanRMUpdateWithWhereUniqueWithoutProductPlanInput | ProductPlanRMUpdateWithWhereUniqueWithoutProductPlanInput[]
    updateMany?: ProductPlanRMUpdateManyWithWhereWithoutProductPlanInput | ProductPlanRMUpdateManyWithWhereWithoutProductPlanInput[]
    deleteMany?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
  }

  export type ProductPlanCreateNestedOneWithoutRmsInput = {
    create?: XOR<ProductPlanCreateWithoutRmsInput, ProductPlanUncheckedCreateWithoutRmsInput>
    connectOrCreate?: ProductPlanCreateOrConnectWithoutRmsInput
    connect?: ProductPlanWhereUniqueInput
  }

  export type RMCreateNestedOneWithoutProductPlanRMsInput = {
    create?: XOR<RMCreateWithoutProductPlanRMsInput, RMUncheckedCreateWithoutProductPlanRMsInput>
    connectOrCreate?: RMCreateOrConnectWithoutProductPlanRMsInput
    connect?: RMWhereUniqueInput
  }

  export type ProductPlanUpdateOneRequiredWithoutRmsNestedInput = {
    create?: XOR<ProductPlanCreateWithoutRmsInput, ProductPlanUncheckedCreateWithoutRmsInput>
    connectOrCreate?: ProductPlanCreateOrConnectWithoutRmsInput
    upsert?: ProductPlanUpsertWithoutRmsInput
    connect?: ProductPlanWhereUniqueInput
    update?: XOR<XOR<ProductPlanUpdateToOneWithWhereWithoutRmsInput, ProductPlanUpdateWithoutRmsInput>, ProductPlanUncheckedUpdateWithoutRmsInput>
  }

  export type RMUpdateOneRequiredWithoutProductPlanRMsNestedInput = {
    create?: XOR<RMCreateWithoutProductPlanRMsInput, RMUncheckedCreateWithoutProductPlanRMsInput>
    connectOrCreate?: RMCreateOrConnectWithoutProductPlanRMsInput
    upsert?: RMUpsertWithoutProductPlanRMsInput
    connect?: RMWhereUniqueInput
    update?: XOR<XOR<RMUpdateToOneWithWhereWithoutProductPlanRMsInput, RMUpdateWithoutProductPlanRMsInput>, RMUncheckedUpdateWithoutProductPlanRMsInput>
  }

  export type RMCreateNestedOneWithoutFormulasInput = {
    create?: XOR<RMCreateWithoutFormulasInput, RMUncheckedCreateWithoutFormulasInput>
    connectOrCreate?: RMCreateOrConnectWithoutFormulasInput
    connect?: RMWhereUniqueInput
  }

  export type RMUpdateOneWithoutFormulasNestedInput = {
    create?: XOR<RMCreateWithoutFormulasInput, RMUncheckedCreateWithoutFormulasInput>
    connectOrCreate?: RMCreateOrConnectWithoutFormulasInput
    upsert?: RMUpsertWithoutFormulasInput
    disconnect?: RMWhereInput | boolean
    delete?: RMWhereInput | boolean
    connect?: RMWhereUniqueInput
    update?: XOR<XOR<RMUpdateToOneWithWhereWithoutFormulasInput, RMUpdateWithoutFormulasInput>, RMUncheckedUpdateWithoutFormulasInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FormulaCreateWithoutChemicalInput = {
    colorCode: string
    qtyPerLot?: number | null
  }

  export type FormulaUncheckedCreateWithoutChemicalInput = {
    id?: number
    colorCode: string
    qtyPerLot?: number | null
  }

  export type FormulaCreateOrConnectWithoutChemicalInput = {
    where: FormulaWhereUniqueInput
    create: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput>
  }

  export type FormulaCreateManyChemicalInputEnvelope = {
    data: FormulaCreateManyChemicalInput | FormulaCreateManyChemicalInput[]
    skipDuplicates?: boolean
  }

  export type ProductPlanRMCreateWithoutRmInput = {
    qtyUsed: number
    productPlan: ProductPlanCreateNestedOneWithoutRmsInput
  }

  export type ProductPlanRMUncheckedCreateWithoutRmInput = {
    id?: number
    productPlanId: number
    qtyUsed: number
  }

  export type ProductPlanRMCreateOrConnectWithoutRmInput = {
    where: ProductPlanRMWhereUniqueInput
    create: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput>
  }

  export type ProductPlanRMCreateManyRmInputEnvelope = {
    data: ProductPlanRMCreateManyRmInput | ProductPlanRMCreateManyRmInput[]
    skipDuplicates?: boolean
  }

  export type FormulaUpsertWithWhereUniqueWithoutChemicalInput = {
    where: FormulaWhereUniqueInput
    update: XOR<FormulaUpdateWithoutChemicalInput, FormulaUncheckedUpdateWithoutChemicalInput>
    create: XOR<FormulaCreateWithoutChemicalInput, FormulaUncheckedCreateWithoutChemicalInput>
  }

  export type FormulaUpdateWithWhereUniqueWithoutChemicalInput = {
    where: FormulaWhereUniqueInput
    data: XOR<FormulaUpdateWithoutChemicalInput, FormulaUncheckedUpdateWithoutChemicalInput>
  }

  export type FormulaUpdateManyWithWhereWithoutChemicalInput = {
    where: FormulaScalarWhereInput
    data: XOR<FormulaUpdateManyMutationInput, FormulaUncheckedUpdateManyWithoutChemicalInput>
  }

  export type FormulaScalarWhereInput = {
    AND?: FormulaScalarWhereInput | FormulaScalarWhereInput[]
    OR?: FormulaScalarWhereInput[]
    NOT?: FormulaScalarWhereInput | FormulaScalarWhereInput[]
    id?: IntFilter<"Formula"> | number
    colorCode?: StringFilter<"Formula"> | string
    chemicalCode?: StringFilter<"Formula"> | string
    qtyPerLot?: FloatNullableFilter<"Formula"> | number | null
  }

  export type ProductPlanRMUpsertWithWhereUniqueWithoutRmInput = {
    where: ProductPlanRMWhereUniqueInput
    update: XOR<ProductPlanRMUpdateWithoutRmInput, ProductPlanRMUncheckedUpdateWithoutRmInput>
    create: XOR<ProductPlanRMCreateWithoutRmInput, ProductPlanRMUncheckedCreateWithoutRmInput>
  }

  export type ProductPlanRMUpdateWithWhereUniqueWithoutRmInput = {
    where: ProductPlanRMWhereUniqueInput
    data: XOR<ProductPlanRMUpdateWithoutRmInput, ProductPlanRMUncheckedUpdateWithoutRmInput>
  }

  export type ProductPlanRMUpdateManyWithWhereWithoutRmInput = {
    where: ProductPlanRMScalarWhereInput
    data: XOR<ProductPlanRMUpdateManyMutationInput, ProductPlanRMUncheckedUpdateManyWithoutRmInput>
  }

  export type ProductPlanRMScalarWhereInput = {
    AND?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
    OR?: ProductPlanRMScalarWhereInput[]
    NOT?: ProductPlanRMScalarWhereInput | ProductPlanRMScalarWhereInput[]
    id?: IntFilter<"ProductPlanRM"> | number
    productPlanId?: IntFilter<"ProductPlanRM"> | number
    rmCode?: StringFilter<"ProductPlanRM"> | string
    qtyUsed?: FloatFilter<"ProductPlanRM"> | number
  }

  export type ProductPlanRMCreateWithoutProductPlanInput = {
    qtyUsed: number
    rm: RMCreateNestedOneWithoutProductPlanRMsInput
  }

  export type ProductPlanRMUncheckedCreateWithoutProductPlanInput = {
    id?: number
    rmCode: string
    qtyUsed: number
  }

  export type ProductPlanRMCreateOrConnectWithoutProductPlanInput = {
    where: ProductPlanRMWhereUniqueInput
    create: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput>
  }

  export type ProductPlanRMCreateManyProductPlanInputEnvelope = {
    data: ProductPlanRMCreateManyProductPlanInput | ProductPlanRMCreateManyProductPlanInput[]
    skipDuplicates?: boolean
  }

  export type ProductPlanRMUpsertWithWhereUniqueWithoutProductPlanInput = {
    where: ProductPlanRMWhereUniqueInput
    update: XOR<ProductPlanRMUpdateWithoutProductPlanInput, ProductPlanRMUncheckedUpdateWithoutProductPlanInput>
    create: XOR<ProductPlanRMCreateWithoutProductPlanInput, ProductPlanRMUncheckedCreateWithoutProductPlanInput>
  }

  export type ProductPlanRMUpdateWithWhereUniqueWithoutProductPlanInput = {
    where: ProductPlanRMWhereUniqueInput
    data: XOR<ProductPlanRMUpdateWithoutProductPlanInput, ProductPlanRMUncheckedUpdateWithoutProductPlanInput>
  }

  export type ProductPlanRMUpdateManyWithWhereWithoutProductPlanInput = {
    where: ProductPlanRMScalarWhereInput
    data: XOR<ProductPlanRMUpdateManyMutationInput, ProductPlanRMUncheckedUpdateManyWithoutProductPlanInput>
  }

  export type ProductPlanCreateWithoutRmsInput = {
    colorCode: string
    lot: string
    percent: number
    date: Date | string
    department: string
  }

  export type ProductPlanUncheckedCreateWithoutRmsInput = {
    id?: number
    colorCode: string
    lot: string
    percent: number
    date: Date | string
    department: string
  }

  export type ProductPlanCreateOrConnectWithoutRmsInput = {
    where: ProductPlanWhereUniqueInput
    create: XOR<ProductPlanCreateWithoutRmsInput, ProductPlanUncheckedCreateWithoutRmsInput>
  }

  export type RMCreateWithoutProductPlanRMsInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    formulas?: FormulaCreateNestedManyWithoutChemicalInput
  }

  export type RMUncheckedCreateWithoutProductPlanRMsInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    formulas?: FormulaUncheckedCreateNestedManyWithoutChemicalInput
  }

  export type RMCreateOrConnectWithoutProductPlanRMsInput = {
    where: RMWhereUniqueInput
    create: XOR<RMCreateWithoutProductPlanRMsInput, RMUncheckedCreateWithoutProductPlanRMsInput>
  }

  export type ProductPlanUpsertWithoutRmsInput = {
    update: XOR<ProductPlanUpdateWithoutRmsInput, ProductPlanUncheckedUpdateWithoutRmsInput>
    create: XOR<ProductPlanCreateWithoutRmsInput, ProductPlanUncheckedCreateWithoutRmsInput>
    where?: ProductPlanWhereInput
  }

  export type ProductPlanUpdateToOneWithWhereWithoutRmsInput = {
    where?: ProductPlanWhereInput
    data: XOR<ProductPlanUpdateWithoutRmsInput, ProductPlanUncheckedUpdateWithoutRmsInput>
  }

  export type ProductPlanUpdateWithoutRmsInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
  }

  export type ProductPlanUncheckedUpdateWithoutRmsInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    lot?: StringFieldUpdateOperationsInput | string
    percent?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
  }

  export type RMUpsertWithoutProductPlanRMsInput = {
    update: XOR<RMUpdateWithoutProductPlanRMsInput, RMUncheckedUpdateWithoutProductPlanRMsInput>
    create: XOR<RMCreateWithoutProductPlanRMsInput, RMUncheckedCreateWithoutProductPlanRMsInput>
    where?: RMWhereInput
  }

  export type RMUpdateToOneWithWhereWithoutProductPlanRMsInput = {
    where?: RMWhereInput
    data: XOR<RMUpdateWithoutProductPlanRMsInput, RMUncheckedUpdateWithoutProductPlanRMsInput>
  }

  export type RMUpdateWithoutProductPlanRMsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    formulas?: FormulaUpdateManyWithoutChemicalNestedInput
  }

  export type RMUncheckedUpdateWithoutProductPlanRMsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    formulas?: FormulaUncheckedUpdateManyWithoutChemicalNestedInput
  }

  export type RMCreateWithoutFormulasInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    productPlanRMs?: ProductPlanRMCreateNestedManyWithoutRmInput
  }

  export type RMUncheckedCreateWithoutFormulasInput = {
    code: string
    name?: string | null
    g_total?: number | null
    order?: number | null
    productPlanRMs?: ProductPlanRMUncheckedCreateNestedManyWithoutRmInput
  }

  export type RMCreateOrConnectWithoutFormulasInput = {
    where: RMWhereUniqueInput
    create: XOR<RMCreateWithoutFormulasInput, RMUncheckedCreateWithoutFormulasInput>
  }

  export type RMUpsertWithoutFormulasInput = {
    update: XOR<RMUpdateWithoutFormulasInput, RMUncheckedUpdateWithoutFormulasInput>
    create: XOR<RMCreateWithoutFormulasInput, RMUncheckedCreateWithoutFormulasInput>
    where?: RMWhereInput
  }

  export type RMUpdateToOneWithWhereWithoutFormulasInput = {
    where?: RMWhereInput
    data: XOR<RMUpdateWithoutFormulasInput, RMUncheckedUpdateWithoutFormulasInput>
  }

  export type RMUpdateWithoutFormulasInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    productPlanRMs?: ProductPlanRMUpdateManyWithoutRmNestedInput
  }

  export type RMUncheckedUpdateWithoutFormulasInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    g_total?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    productPlanRMs?: ProductPlanRMUncheckedUpdateManyWithoutRmNestedInput
  }

  export type FormulaCreateManyChemicalInput = {
    id?: number
    colorCode: string
    qtyPerLot?: number | null
  }

  export type ProductPlanRMCreateManyRmInput = {
    id?: number
    productPlanId: number
    qtyUsed: number
  }

  export type FormulaUpdateWithoutChemicalInput = {
    colorCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FormulaUncheckedUpdateWithoutChemicalInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FormulaUncheckedUpdateManyWithoutChemicalInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorCode?: StringFieldUpdateOperationsInput | string
    qtyPerLot?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ProductPlanRMUpdateWithoutRmInput = {
    qtyUsed?: FloatFieldUpdateOperationsInput | number
    productPlan?: ProductPlanUpdateOneRequiredWithoutRmsNestedInput
  }

  export type ProductPlanRMUncheckedUpdateWithoutRmInput = {
    id?: IntFieldUpdateOperationsInput | number
    productPlanId?: IntFieldUpdateOperationsInput | number
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductPlanRMUncheckedUpdateManyWithoutRmInput = {
    id?: IntFieldUpdateOperationsInput | number
    productPlanId?: IntFieldUpdateOperationsInput | number
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductPlanRMCreateManyProductPlanInput = {
    id?: number
    rmCode: string
    qtyUsed: number
  }

  export type ProductPlanRMUpdateWithoutProductPlanInput = {
    qtyUsed?: FloatFieldUpdateOperationsInput | number
    rm?: RMUpdateOneRequiredWithoutProductPlanRMsNestedInput
  }

  export type ProductPlanRMUncheckedUpdateWithoutProductPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    rmCode?: StringFieldUpdateOperationsInput | string
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductPlanRMUncheckedUpdateManyWithoutProductPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    rmCode?: StringFieldUpdateOperationsInput | string
    qtyUsed?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}